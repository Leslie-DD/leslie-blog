import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as r,a as n,b as s,d as a,w as e,e as t}from"./app-CmmhIpK3.js";const u="/leslie-blog/assets/bplus-tree-1-Cbm_FUBt.png",k="/leslie-blog/assets/bplus-tree-2-B6gaq2Fc.png",d="/leslie-blog/assets/bplus-tree-3-BvAdlG43.png",m="/leslie-blog/assets/bplus-tree-4-ByX6v7s7.png",v="/leslie-blog/assets/bplus-tree-5-BTjtp7zh.png",b="/leslie-blog/assets/bplus-tree-6-B0if88Vg.png",g="/leslie-blog/assets/bplus-tree-7-DpxIFwQp.png",h="/leslie-blog/assets/bplus-tree-8-INVkSXol.png",y="/leslie-blog/assets/bplus-tree-9-CrsRZZGW.png",w="/leslie-blog/assets/bplus-tree-10-Chf-gHhP.png",f={},x={class:"hint-container info"},N=n("p",{class:"hint-container-title"},"转载自",-1),L={href:"https://oi-wiki.org/ds/bplus-tree/",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"引入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#引入"},[n("span",null,"引入")])],-1),_=n("p",null,"B+ 树是一种多叉排序树，即每个节点通常有多个孩子。一棵 B+ 树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可能是一个包含两个或两个以上孩子节点的节点。",-1),M=n("p",null,"B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。",-1),B=n("p",null,[s("首先介绍一棵 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m")]),n("annotation",{encoding:"application/x-tex"},"m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"m")])])]),s(" 阶 B+ 树的特性。"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m")]),n("annotation",{encoding:"application/x-tex"},"m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"m")])])]),s(" 表示这个树的每一个节点最多可以拥有的子节点个数。一棵 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m")]),n("annotation",{encoding:"application/x-tex"},"m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"m")])])]),s(" 阶的 B+ 树和 B 树的差异在于：")],-1),j=n("ol",null,[n("li",null,[s("有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" 棵子树的节点中含有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" 个关键字（即将区间分为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" 个子区间，每个子区间对应一棵子树）。")]),n("li",null,"所有叶子节点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子节点本身依关键字的大小自小而大顺序链接。"),n("li",null,"所有的非叶子节点可以看成是索引部分，节点中仅含有其子树（根节点）中的最大（或最小）关键字。"),n("li",null,[s("除根节点外，其他所有节点中所含关键字的个数最少有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"⌈"),n("mstyle",{displaystyle:"true",scriptlevel:"0"},[n("mfrac",null,[n("mi",null,"m"),n("mn",null,"2")])]),n("mo",{stretchy:"false"},"⌉")]),n("annotation",{encoding:"application/x-tex"},"\\lceil \\dfrac{m}{2} \\rceil")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.7936em","vertical-align":"-0.686em"}}),n("span",{class:"mopen"},"⌈"),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.1076em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose"},"⌉")])])]),s("（注意：B 树中除根以外的所有非叶子节点至少有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"⌈"),n("mstyle",{displaystyle:"true",scriptlevel:"0"},[n("mfrac",null,[n("mi",null,"m"),n("mn",null,"2")])]),n("mo",{stretchy:"false"},"⌉")]),n("annotation",{encoding:"application/x-tex"},"\\lceil \\dfrac{m}{2} \\rceil")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.7936em","vertical-align":"-0.686em"}}),n("span",{class:"mopen"},"⌈"),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.1076em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose"},"⌉")])])]),s(" 棵子树）。")])],-1),R=t('<p>同时，B+ 树为了方便范围查询，叶子节点之间还用指针串联起来。</p><p>以下是一棵 B+ 树的典型结构：</p><p><img src="'+u+'" alt=""></p><h2 id="b-树相比于-b-树的优势" tabindex="-1"><a class="header-anchor" href="#b-树相比于-b-树的优势"><span>B+ 树相比于 B 树的优势</span></a></h2><p>由于索引节点上只有索引而没有数据，所以索引节点上能存储比 B 树更多的索引，这样树的高度就会更矮。树的高度越矮，磁盘寻道的次数就会越少。</p><p>因为数据都集中在叶子节点，而所有叶子节点的高度相同，那么可以在叶子节点中增加前后指针，指向同一个父节点的相邻兄弟节点，这样可以更好地支持查询一个值的前驱或后继，使连续访问更容易实现。</p><p>比如这样的 SQL 语句：<code>select * from tbl where t &gt; 10</code>，如果使用 B+ 树存储数据的话，可以首先定位到数据为 10 的节点，再沿着它的 <code>next</code> 指针一路找到所有在该叶子节点右边的叶子节点，返回这些节点包含的数据。</p><p>而如果使用 B 树结构，由于数据既可以存储在内部节点也可以存储在叶子节点，连续访问的实现会更加繁琐（需要在树的内部结构中进行移动）。</p><h2 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h2>',9),A=n("h3",{id:"查找",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#查找"},[n("span",null,"查找")])],-1),S=n("p",null,[s("B+ 树的查找过程和 B 树类似。假设需要查找的键值是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"k")]),n("annotation",{encoding:"application/x-tex"},"k")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),s("，那么从根节点开始，从上到下递归地遍历树。在每一层上，搜索的范围被减小到包含搜索值的子树中。")],-1),X=t('<p>一个实例：在如下这棵 B+ 树上查找 45。</p><p><img src="'+k+'" alt=""></p><p>先和根节点比较</p><p><img src="'+d+'" alt=""></p><p>因为根节点的键值比 45 要小，所以去往根节点的右子树查找</p><p><img src="'+m+'" alt=""></p><p>因为 45 比 35 大，所以要与右边的索引相比</p><p><img src="'+v+'" alt=""></p><p>右侧的索引也为 45，所以要去往该节点的右子树继续查找</p><p><img src="'+b+`" alt=""></p><p>然后就可以找到 45</p><p>需要注意的是，在查找时，若非叶子节点上的关键字等于给定值，并不终止，而是继续向下直到叶子节点。因此，在 B+ 树中，不管查找成功与否，每次查找都是走了一条从根到叶子节点的路径。其余同 B 树的查找类似。</p><p>查找一个键的代码如下：</p><div class="hint-container info"><p class="hint-container-title">实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>T <span class="token function">find</span><span class="token punctuation">(</span>V key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h3><p>B+ 树只在叶子节点的层级上就可以实现整棵树的遍历。从根节点出发一路搜索到最左端的叶子节点之后即可根据指针遍历。</p><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h3><p>B+ 树的插入算法与 B 树的相近：</p>`,18),I=n("ol",null,[n("li",null,"若为空树，创建一个叶子节点，然后将记录插入其中，此时这个叶子节点也是根节点，插入操作结束。"),n("li",null,[s("针对叶子类型节点：根据关键字找到叶子节点，向这个叶子节点插入记录。插入后，若当前节点关键字的个数小于 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m")]),n("annotation",{encoding:"application/x-tex"},"m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"m")])])]),s("，则插入结束。否则将这个叶子节点分裂成左右两个叶子节点，左叶子节点包含前 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mi",{mathvariant:"normal"},"/"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"m/2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},"/2")])])]),s(" 个记录，右节点包含剩下的记录，将第 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mi",{mathvariant:"normal"},"/"),n("mn",null,"2"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"m/2+1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},"/2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" 个记录的关键字进位到父节点中（父节点一定是索引类型节点），进位到父节点的关键字左孩子指针向左节点，右孩子指针向右节点。将当前节点的指针指向父节点，然后执行第 3 步。")]),n("li",null,[s("针对索引类型节点（内部节点）：若当前节点关键字的个数小于等于 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"m-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s("，则插入结束。否则，将这个索引类型节点分裂成两个索引节点，左索引节点包含前 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mi",{mathvariant:"normal"},"/"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"(m-1)/2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},"/2")])])]),s(" 个 key，右节点包含 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mo",null,"−"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mi",{mathvariant:"normal"},"/"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"m-(m-1)/2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},"/2")])])]),s(" 个 key，将第 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mi",{mathvariant:"normal"},"/"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"m/2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},"/2")])])]),s(" 个关键字进位到父节点中，进位到父节点的关键字左孩子指向左节点，进位到父节点的关键字右孩子指向右节点。将当前节点的指针指向父节点，然后重复这一步。")])],-1),P=n("p",null,"比如在下图的 B+ 树中，插入新的数据 10：",-1),T=n("p",null,[n("img",{src:g,alt:""})],-1),U=n("p",null,[s("由于插入节点 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"7"),n("mo",{separator:"true"},","),n("mn",null,"11"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[7,11]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"7"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"11"),n("span",{class:"mclose"},"]")])])]),s(" 在插入之后并没有溢出，所以可以直接变成 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"7"),n("mo",{separator:"true"},","),n("mn",null,"10"),n("mo",{separator:"true"},","),n("mn",null,"11"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[7,10,11]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"7"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"10"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"11"),n("span",{class:"mclose"},"]")])])]),s("。")],-1),F=n("p",null,[n("img",{src:h,alt:""})],-1),E=n("p",null,"而如下图的 B+ 树中，插入数据 4：",-1),q=n("p",null,[n("img",{src:y,alt:""})],-1),V=n("p",null,[s("由于所在节点 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"2"),n("mo",{separator:"true"},","),n("mn",null,"3"),n("mo",{separator:"true"},","),n("mn",null,"5"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[2,3,5]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"2"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mclose"},"]")])])]),s(" 在插入之后数据溢出，因此需要分裂为两个新的节点，同时调整父节点的索引数据：")],-1),C=n("p",null,[n("img",{src:w,alt:""})],-1),Z=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"2"),n("mo",{separator:"true"},","),n("mn",null,"3"),n("mo",{separator:"true"},","),n("mn",null,"4"),n("mo",{separator:"true"},","),n("mn",null,"5"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[2,3,4,5]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"2"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"4"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mclose"},"]")])])]),s(" 分裂成了 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"2"),n("mo",{separator:"true"},","),n("mn",null,"3"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[2,3]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"2"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mclose"},"]")])])]),s(" 和 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"4"),n("mo",{separator:"true"},","),n("mn",null,"5"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[4,5]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"4"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mclose"},"]")])])]),s("，因此需要在这两个节点之间新增一个索引值，这个值应该满足：")],-1),K=n("ol",null,[n("li",null,"大于左子树的最大值；"),n("li",null,"小于等于右子树的最小值。")],-1),D=n("p",null,"综上，需要在父节点中新增索引 4 和两个指向新节点的指针。",-1),G={href:"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>插入一个键的代码如下：</p><div class="hint-container info"><p class="hint-container-title">实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    root <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> cursor <span class="token operator">=</span> root<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">insertVal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span>
      <span class="token function">split</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> Node<span class="token operator">*</span> parent<span class="token punctuation">,</span> Node<span class="token operator">*</span> cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Node<span class="token operator">*</span> LLeaf <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
  Node<span class="token operator">*</span> RLeaf <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
  <span class="token function">insertVal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  LLeaf<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> RLeaf<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  LLeaf<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  RLeaf<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> LLeaf<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  LLeaf<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>LLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> RLeaf<span class="token punctuation">;</span>
  RLeaf<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>RLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> LLeaf<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
  LLeaf<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> LLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    RLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> newRoot <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    newRoot<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> RLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> LLeaf<span class="token punctuation">;</span>
    newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> RLeaf<span class="token punctuation">;</span>
    newRoot<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    newRoot<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    root <span class="token operator">=</span> newRoot<span class="token punctuation">;</span>
    LLeaf<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> RLeaf<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> newRoot<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">insertInternal</span><span class="token punctuation">(</span>RLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> LLeaf<span class="token punctuation">,</span> RLeaf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">insertInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> Node<span class="token operator">*</span> cursor<span class="token punctuation">,</span> Node<span class="token operator">*</span> LLeaf<span class="token punctuation">,</span> Node<span class="token operator">*</span> RRLeaf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token function">insertVal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> LLeaf<span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> RRLeaf<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Node<span class="token operator">*</span> newLchild <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> newRchild <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    Node<span class="token operator">*</span> virtualPtr<span class="token punctuation">[</span>MAX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      virtualPtr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">insertVal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> MAX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      virtualPtr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> virtualPtr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    virtualPtr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> LLeaf<span class="token punctuation">;</span>
    virtualPtr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> RRLeaf<span class="token punctuation">;</span>
    newLchild<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> newRchild<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里和叶子节点有区别</span>
    newLchild<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    newRchild<span class="token operator">-&gt;</span>size <span class="token operator">=</span> MAX <span class="token operator">-</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newLchild<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newLchild<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> newLchild<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newRchild<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newRchild<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LLeaf<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newLchild<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtualPtr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> LLeaf<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RRLeaf<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newRchild<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtualPtr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node<span class="token operator">*</span> newRoot <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>newLchild<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newLchild<span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> newRchild<span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      root <span class="token operator">=</span> newRoot<span class="token punctuation">;</span>
      newLchild<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> newRchild<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> newRoot<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">insertInternal</span><span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>newLchild<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">,</span> cursor<span class="token operator">-&gt;</span>parent<span class="token punctuation">,</span> newLchild<span class="token punctuation">,</span>
                      newRchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3>`,3),Q=n("p",null,[s("B+ 树的删除也仅在叶子节点中进行，当叶子节点中的最大关键字被删除时，其在非叶子节点中的值可以作为一个分界关键字存在。若因删除而使节点中关键字的个数少于 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"⌈"),n("mstyle",{displaystyle:"true",scriptlevel:"0"},[n("mfrac",null,[n("mi",null,"m"),n("mn",null,"2")])]),n("mo",{stretchy:"false"},"⌉")]),n("annotation",{encoding:"application/x-tex"},"\\lceil \\dfrac{m}{2} \\rceil")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.7936em","vertical-align":"-0.686em"}}),n("span",{class:"mopen"},"⌈"),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.1076em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"m")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.686em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mclose"},"⌉")])])]),s(" 时，其和兄弟节点的合并过程亦和 B 树类似。")],-1),H=n("p",null,"具体步骤如下：",-1),O=n("ol",null,[n("li",null,"首先查询到键值所在的叶子节点，删除该叶子节点的数据。"),n("li",null,"如果删除叶子节点之后的数据数量，满足 B+ 树的平衡条件，则直接返回。"),n("li",null,"否则，就需要做平衡操作：如果该叶子节点的左右兄弟节点的数据量可以借用，就借用过来满足平衡条件。否则，就与相邻的兄弟节点合并成一个新的子节点了。")],-1),W=n("p",null,"在上面平衡操作中，如果是进行了合并操作，就需要向上修正父节点的指针：删除被合并节点的键值以及指针。",-1),Y=n("p",null,"由于做了删除操作，可能父节点也会不平衡，那么就按照前面的步骤也对父节点进行重新平衡操作，这样一直到某个节点平衡为止。",-1),$=t(`<div class="hint-container info"><p class="hint-container-title">实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// Deletion operation on a B+ tree in cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">BPTree</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token keyword">bool</span> IS_LEAF<span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
  Node <span class="token operator">*</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span>
  <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">BPTree</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">BPTree</span> <span class="token punctuation">{</span>
  Node <span class="token operator">*</span>root<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">insertInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> Node <span class="token operator">*</span><span class="token punctuation">,</span> Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">removeInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> Node <span class="token operator">*</span><span class="token punctuation">,</span> Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Node <span class="token operator">*</span><span class="token function">findParent</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">,</span> Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">BPTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Node <span class="token operator">*</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Node</span><span class="token double-colon punctuation">::</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
  ptr <span class="token operator">=</span> <span class="token keyword">new</span> Node <span class="token operator">*</span><span class="token punctuation">[</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">BPTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    root <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>cursor <span class="token operator">=</span> root<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>parent<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      Node <span class="token operator">*</span>newLeaf <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
      <span class="token keyword">int</span> virtualNode<span class="token punctuation">[</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        virtualNode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> virtualNode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        virtualNode<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> virtualNode<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      virtualNode<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
      newLeaf<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
      newLeaf<span class="token operator">-&gt;</span>size <span class="token operator">=</span> MAX <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> newLeaf<span class="token punctuation">;</span>
      newLeaf<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>newLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtualNode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newLeaf<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtualNode<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Node <span class="token operator">*</span>newRoot <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
        newRoot<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
        newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> newLeaf<span class="token punctuation">;</span>
        newRoot<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        newRoot<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        root <span class="token operator">=</span> newRoot<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">insertInternal</span><span class="token punctuation">(</span>newLeaf<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> newLeaf<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">insertInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> Node <span class="token operator">*</span>cursor<span class="token punctuation">,</span> Node <span class="token operator">*</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>newInternal <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
    <span class="token keyword">int</span> virtualKey<span class="token punctuation">[</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    Node <span class="token operator">*</span>virtualPtr<span class="token punctuation">[</span>MAX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      virtualKey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      virtualPtr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> virtualKey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      virtualKey<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> virtualKey<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    virtualKey<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> MAX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      virtualPtr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> virtualPtr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    virtualPtr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> child<span class="token punctuation">;</span>
    newInternal<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    newInternal<span class="token operator">-&gt;</span>size <span class="token operator">=</span> MAX <span class="token operator">-</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newInternal<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newInternal<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtualKey<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newInternal<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newInternal<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtualPtr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node <span class="token operator">*</span>newRoot <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> newInternal<span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      newRoot<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      root <span class="token operator">=</span> newRoot<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">insertInternal</span><span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">findParent</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">,</span>
                      newInternal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Node <span class="token operator">*</span><span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">findParent</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>cursor<span class="token punctuation">,</span> Node <span class="token operator">*</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Node <span class="token operator">*</span>parent<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">||</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>IS_LEAF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      parent <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
      <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      parent <span class="token operator">=</span> <span class="token function">findParent</span><span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Tree empty\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>cursor <span class="token operator">=</span> root<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>parent<span class="token punctuation">;</span>
    <span class="token keyword">int</span> leftSibling<span class="token punctuation">,</span> rightSibling<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        parent <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
        leftSibling <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        rightSibling <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          leftSibling <span class="token operator">=</span> i<span class="token punctuation">;</span>
          rightSibling <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
          cursor <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Not found\\n&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cursor<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Tree died\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> cursor<span class="token punctuation">;</span>
        root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSibling <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node <span class="token operator">*</span>leftNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cursor<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
        cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        leftNode<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
        leftNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token punctuation">;</span>
        leftNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightSibling <span class="token operator">&lt;=</span> parent<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node <span class="token operator">*</span>rightNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
        cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        rightNode<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
        rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>rightSibling <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSibling <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node <span class="token operator">*</span>leftNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> leftNode<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        leftNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      leftNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      leftNode<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
      leftNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">removeInternal</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
      <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
      <span class="token keyword">delete</span> cursor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rightSibling <span class="token operator">&lt;=</span> parent<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Node <span class="token operator">*</span>rightNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
      cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Merging two leaf nodes\\n&quot;</span><span class="token punctuation">;</span>
      <span class="token function">removeInternal</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>rightSibling <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
      <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
      <span class="token keyword">delete</span> rightNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">removeInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> Node <span class="token operator">*</span>cursor<span class="token punctuation">,</span> Node <span class="token operator">*</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> child<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> child<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> child<span class="token punctuation">;</span>
        root <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> cursor<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Changed root node\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> child<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> child<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> child<span class="token punctuation">;</span>
        root <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> cursor<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Changed root node\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> pos<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cursor<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  Node <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token function">findParent</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> leftSibling<span class="token punctuation">,</span> rightSibling<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> parent<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      leftSibling <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      rightSibling <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSibling <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>leftNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
      parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span> <span class="token operator">=</span> leftNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
      leftNode<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rightSibling <span class="token operator">&lt;=</span> parent<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>rightNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightNode<span class="token operator">-&gt;</span>size <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
      parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rightNode<span class="token operator">-&gt;</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      cursor<span class="token operator">-&gt;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>
      rightNode<span class="token operator">-&gt;</span>size<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSibling <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>leftNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
    leftNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftNode<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> leftNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      leftNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> leftNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      leftNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    leftNode<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">removeInternal</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>leftSibling<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> cursor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rightSibling <span class="token operator">&lt;=</span> parent<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Node <span class="token operator">*</span>rightNode <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>rightSibling<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>rightSibling <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rightNode<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rightNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      rightNode<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cursor<span class="token operator">-&gt;</span>size <span class="token operator">+=</span> rightNode<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    rightNode<span class="token operator">-&gt;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">removeInternal</span><span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>rightSibling <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">display</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>cursor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cout <span class="token operator">&lt;&lt;</span> cursor<span class="token operator">-&gt;</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>IS_LEAF <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cursor<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">display</span><span class="token punctuation">(</span>cursor<span class="token operator">-&gt;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Node <span class="token operator">*</span><span class="token class-name">BPTree</span><span class="token double-colon punctuation">::</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  BPTree node<span class="token punctuation">;</span>
  node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  node<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  node<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  node<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  node<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,2),nn={href:"https://en.wikipedia.org/wiki/B%2B_tree",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://www.codedump.info/post/20200615-btree-2/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://www.cnblogs.com/JayL-zxl/p/14304178.html",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://www.programiz.com/dsa/deletion-from-a-b-plus-tree",target:"_blank",rel:"noopener noreferrer"};function tn(on,en){const p=c("ExternalLinkIcon"),o=c("RouteLink");return i(),r("div",null,[n("div",x,[N,n("p",null,[n("a",L,[s("https://oi-wiki.org/ds/bplus-tree/"),a(p)])])]),z,n("p",null,[s("B+ 树是 "),a(o,{to:"/datastructure/tree/b-tree.html"},{default:e(()=>[s("B 树")]),_:1}),s(" 的一个升级，它比 B 树更适合实际应用中操作系统的文件索引和数据库索引。目前现代关系型数据库最广泛的支持索引结构就是 B+ 树。")]),_,M,B,j,R,n("p",null,[s("与 "),a(o,{to:"/datastructure/tree/b-tree.html"},{default:e(()=>[s("B 树")]),_:1}),s(" 类似，B+ 树的基本操作有查找，遍历，插入，删除。")]),A,S,X,I,P,T,U,F,E,q,V,C,Z,K,D,n("p",null,[s("更多的例子可以参考演示网站 "),n("a",G,[s("BPlustree"),a(p)])]),J,Q,H,O,W,Y,n("p",null,[s("可以参考 "),a(o,{to:"/datastructure/tree/b-tree.html"},{default:e(()=>[s("B 树")]),_:1}),s(" 中的删除章节。")]),$,n("ul",null,[n("li",null,[n("a",nn,[s("B+ tree wikipedia"),a(p)])]),n("li",null,[n("a",sn,[s("B 树、B+ 树索引算法原理（下）"),a(p)])]),n("li",null,[n("a",an,[s("B+ 树详解 + 代码实现（插入篇）"),a(p)])]),n("li",null,[n("a",pn,[s("Deletion from a B+ Tree"),a(p)])])])])}const rn=l(f,[["render",tn],["__file","bplus-tree.html.vue"]]),un=JSON.parse('{"path":"/datastructure/tree/bplus-tree.html","title":"B+树","lang":"zh-CN","frontmatter":{"title":"B+树","author":"Persdre","editLink":false,"comment":false,"date":"2024-04-18T00:00:00.000Z","description":"转载自 https://oi-wiki.org/ds/bplus-tree/ 引入 B+ 树是 的一个升级，它比 B 树更适合实际应用中操作系统的文件索引和数据库索引。目前现代关系型数据库最广泛的支持索引结构就是 B+ 树。 B+ 树是一种多叉排序树，即每个节点通常有多个孩子。一棵 B+ 树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可...","head":[["meta",{"property":"og:url","content":"https://leslie-dd.github.io/leslie-blog/leslie-blog/datastructure/tree/bplus-tree.html"}],["meta",{"property":"og:site_name","content":"Leslie的博客"}],["meta",{"property":"og:title","content":"B+树"}],["meta",{"property":"og:description","content":"转载自 https://oi-wiki.org/ds/bplus-tree/ 引入 B+ 树是 的一个升级，它比 B 树更适合实际应用中操作系统的文件索引和数据库索引。目前现代关系型数据库最广泛的支持索引结构就是 B+ 树。 B+ 树是一种多叉排序树，即每个节点通常有多个孩子。一棵 B+ 树包含根节点、内部节点和叶子节点。根节点可能是一个叶子节点，也可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-19T07:24:37.000Z"}],["meta",{"property":"article:author","content":"Persdre"}],["meta",{"property":"article:published_time","content":"2024-04-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-19T07:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"B+树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-19T07:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Persdre\\"}]}"]]},"headers":[{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":2,"title":"B+ 树相比于 B 树的优势","slug":"b-树相比于-b-树的优势","link":"#b-树相比于-b-树的优势","children":[]},{"level":2,"title":"过程","slug":"过程","link":"#过程","children":[{"level":3,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":3,"title":"遍历","slug":"遍历","link":"#遍历","children":[]},{"level":3,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":3,"title":"删除","slug":"删除","link":"#删除","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1713437600000,"updatedTime":1713511477000,"contributors":[{"name":"Leslie","email":"LeslieDYF@gmail.com","commits":1}]},"readingTime":{"minutes":14.24,"words":4273},"filePathRelative":"datastructure/tree/bplus-tree.md","localizedDate":"2024年4月18日","excerpt":"<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">转载自</p>\\n<p><a href=\\"https://oi-wiki.org/ds/bplus-tree/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://oi-wiki.org/ds/bplus-tree/</a></p>\\n</div>\\n<h2>引入</h2>\\n<p>B+ 树是 <a href=\\"/leslie-blog/datastructure/tree/b-tree.html\\" target=\\"_blank\\">B 树</a> 的一个升级，它比 B 树更适合实际应用中操作系统的文件索引和数据库索引。目前现代关系型数据库最广泛的支持索引结构就是 B+ 树。</p>","autoDesc":true}');export{rn as comp,un as data};
