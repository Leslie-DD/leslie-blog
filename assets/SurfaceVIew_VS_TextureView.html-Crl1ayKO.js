import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,a}from"./app-CUpIY64Q.js";const n={},l=a(`<div class="hint-container tip"><p class="hint-container-title">视图</p><p>SurfaceView 和 TextureView 是 Android 应用开发中用于显示内容的两种常用视图，尤其是在需要呈现视频或其他图形内容时。理解它们的作用和区别对于在不同场景下选择合适的视图非常重要。</p></div><h2 id="一、surfaceview" tabindex="-1"><a class="header-anchor" href="#一、surfaceview"><span>一、SurfaceView</span></a></h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用：</span></a></h3><p>SurfaceView 提供了一种将内容直接绘制到屏幕上的方式，主要用于高效显示频繁更新的内容，比如视频、游戏图形等。</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点：</span></a></h3><ul><li><strong>默认在独立的窗口（Surface）中绘制</strong>：SurfaceView 创建一个独立的窗口，通过一个独立的 Surface 进行绘制，绘制过程和主线程分离，减少卡顿。</li><li><strong>较低延迟</strong>：由于 SurfaceView 使用独立的表面，它的绘制操作会更加顺畅高效，适合需要高帧率的场景。</li><li><strong>不支持变换（Translation、Rotation 等）</strong>：SurfaceView 不支持像普通视图一样进行移动、缩放、旋转等变换操作，因为这些操作需要从根本上重排独立的 Surface。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景：</span></a></h3><ul><li>视频播放</li><li>高性能游戏图形渲染</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> surfaceView </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(R.id.surfaceView)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> holder </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> surfaceView.holder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">holder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> surfaceCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(holder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 开始绘制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> surfaceChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(holder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, format: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, width: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, height: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 处理更改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> surfaceDestroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(holder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceHolder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 停止绘制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、textureview" tabindex="-1"><a class="header-anchor" href="#二、textureview"><span>二、TextureView</span></a></h2><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1"><span>作用：</span></a></h3><p>TextureView 是一个显示内容的控件，可以在其内容上进行复杂的视图变换，如缩放、旋转等。TextureView 渲染的内容会在视图层次中作为纹理进行处理。</p><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点：</span></a></h3><ul><li><strong>呈现在视图层级中</strong>：相比于 SurfaceView，TextureView 的内容是在正常的视图层次中进行绘制，允许多层视图叠加和变换效果。</li><li><strong>支持变换</strong>：TextureView 支持视图的常见变换操作（Translation、Rotation、Scale 等），适合在需要动画和变换效果的场景下使用。</li><li><strong>有一定性能开销</strong>：由于其内容在视图层级中作为纹理处理，导致它的性能相对 SurfaceView 有所下降，但仍然适用于大多数动态内容需求。</li></ul><h3 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景：</span></a></h3><ul><li>视频播放需要特效变换（例如旋转、缩放）</li><li>动画内容</li><li>拍照、视频录制时的取景预览</li></ul><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> textureView </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">TextureView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(R.id.textureView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">textureView.surfaceTextureListener </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">TextureView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SurfaceTextureListener</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onSurfaceTextureAvailable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(surface: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceTexture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, width: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, height: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 开始绘制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onSurfaceTextureSizeChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(surface: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceTexture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, width: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, height: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 处理尺寸变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onSurfaceTextureDestroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(surface: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceTexture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 返回true表示SurfaceTexture将被释放</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> onSurfaceTextureUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(surface: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">SurfaceTexture</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 更新绘制内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、主要区别" tabindex="-1"><a class="header-anchor" href="#三、主要区别"><span>三、主要区别</span></a></h2><h3 id="_1、-性能差异" tabindex="-1"><a class="header-anchor" href="#_1、-性能差异"><span>1、 性能差异：</span></a></h3><p>SurfaceView 利用独立的 Surface 进行渲染，性能较高，适合对延迟和帧率要求高的场景。<br> TextureView 在视图层级中作为纹理处理，性能稍逊，但提供更多视图操作灵活性。</p><h3 id="_2、-视图变换" tabindex="-1"><a class="header-anchor" href="#_2、-视图变换"><span>2、 视图变换：</span></a></h3><ul><li>SurfaceView 不支持常见的视图变换操作（如旋转、缩放），只能随整个窗体一同进行变换。</li><li>TextureView 支持所有视图变换操作，适合需要变换和动画的内容。</li></ul><h3 id="_3、-使用方式" tabindex="-1"><a class="header-anchor" href="#_3、-使用方式"><span>3、 使用方式：</span></a></h3><ul><li>SurfaceView 需要通过 SurfaceHolder 进行管理和绘制。</li><li>TextureView 通过 SurfaceTexture 进行管理，较为简单和灵活。</li></ul><h3 id="_4、-视图层级" tabindex="-1"><a class="header-anchor" href="#_4、-视图层级"><span>4、 视图层级：</span></a></h3><ul><li>SurfaceView 的内容会穿透整个视图层级，可能导致其上层盖的其他控件看不到。</li><li>TextureView 的内容在正常视图层级中，可以进行叠加和变换。</li></ul><p>在具体应用中，开发者需要根据性能需求、视图变换需求和视图层级管理的需求选择合适的视图控件。</p>`,27),t=[l];function h(r,k){return e(),s("div",null,t)}const c=i(n,[["render",h],["__file","SurfaceVIew_VS_TextureView.html.vue"]]),u=JSON.parse('{"path":"/blog/android/SurfaceVIew_VS_TextureView.html","title":"SurfaceView 和 TextureView 的区别","lang":"zh-CN","frontmatter":{"title":"SurfaceView 和 TextureView 的区别","author":"Evan","editLink":false,"comment":false,"date":"2024-09-24T00:00:00.000Z","description":"视图 SurfaceView 和 TextureView 是 Android 应用开发中用于显示内容的两种常用视图，尤其是在需要呈现视频或其他图形内容时。理解它们的作用和区别对于在不同场景下选择合适的视图非常重要。 一、SurfaceView 作用： SurfaceView 提供了一种将内容直接绘制到屏幕上的方式，主要用于高效显示频繁更新的内容，比如视...","head":[["meta",{"property":"og:url","content":"https://leslie-dd.github.io/leslie-blog/leslie-blog/blog/android/SurfaceVIew_VS_TextureView.html"}],["meta",{"property":"og:site_name","content":"Leslie的博客"}],["meta",{"property":"og:title","content":"SurfaceView 和 TextureView 的区别"}],["meta",{"property":"og:description","content":"视图 SurfaceView 和 TextureView 是 Android 应用开发中用于显示内容的两种常用视图，尤其是在需要呈现视频或其他图形内容时。理解它们的作用和区别对于在不同场景下选择合适的视图非常重要。 一、SurfaceView 作用： SurfaceView 提供了一种将内容直接绘制到屏幕上的方式，主要用于高效显示频繁更新的内容，比如视..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-23T18:19:35.000Z"}],["meta",{"property":"article:author","content":"Evan"}],["meta",{"property":"article:published_time","content":"2024-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-23T18:19:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SurfaceView 和 TextureView 的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-23T18:19:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Evan\\"}]}"]]},"headers":[{"level":2,"title":"一、SurfaceView","slug":"一、surfaceview","link":"#一、surfaceview","children":[{"level":3,"title":"作用：","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"特点：","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"使用场景：","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"二、TextureView","slug":"二、textureview","link":"#二、textureview","children":[{"level":3,"title":"作用：","slug":"作用-1","link":"#作用-1","children":[]},{"level":3,"title":"特点：","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"使用场景：","slug":"使用场景-1","link":"#使用场景-1","children":[]}]},{"level":2,"title":"三、主要区别","slug":"三、主要区别","link":"#三、主要区别","children":[{"level":3,"title":"1、 性能差异：","slug":"_1、-性能差异","link":"#_1、-性能差异","children":[]},{"level":3,"title":"2、 视图变换：","slug":"_2、-视图变换","link":"#_2、-视图变换","children":[]},{"level":3,"title":"3、 使用方式：","slug":"_3、-使用方式","link":"#_3、-使用方式","children":[]},{"level":3,"title":"4、 视图层级：","slug":"_4、-视图层级","link":"#_4、-视图层级","children":[]}]}],"git":{"createdTime":1729006284000,"updatedTime":1742753975000,"contributors":[{"name":"Leslie","email":"LeslieDYF@gmail.com","commits":2}]},"readingTime":{"minutes":2.99,"words":896},"filePathRelative":"blog/android/SurfaceVIew_VS_TextureView.md","localizedDate":"2024年9月24日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">视图</p>\\n<p>SurfaceView 和 TextureView 是 Android 应用开发中用于显示内容的两种常用视图，尤其是在需要呈现视频或其他图形内容时。理解它们的作用和区别对于在不同场景下选择合适的视图非常重要。</p>\\n</div>\\n<h2>一、SurfaceView</h2>\\n<h3>作用：</h3>\\n<p>SurfaceView 提供了一种将内容直接绘制到屏幕上的方式，主要用于高效显示频繁更新的内容，比如视频、游戏图形等。</p>\\n<h3>特点：</h3>","autoDesc":true}');export{c as comp,u as data};
