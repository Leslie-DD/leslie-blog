import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a}from"./app-BLEr-X1h.js";const l="/leslie-blog/assets/1-YS5yhxvD-YS5yhxvD.png",i="/leslie-blog/assets/2-CFHd4NU8-CFHd4NU8.png",d="/leslie-blog/assets/3-C4Apz7th-C4Apz7th.png",p="/leslie-blog/assets/4-C2eIahUh-C2eIahUh.png",c="/leslie-blog/assets/5-GYIVKEun-GYIVKEun.png",t="/leslie-blog/assets/6-DAaW6e2T-DAaW6e2T.png",o="/leslie-blog/assets/8-CfIYkxc_-CfIYkxc_.png",r="/leslie-blog/assets/7-VC1KCijc-VC1KCijc.png",h="/leslie-blog/assets/9-DxwWV3Tg-DxwWV3Tg.png",v="/leslie-blog/assets/10-BT_L7S9f-BT_L7S9f.png",u="/leslie-blog/assets/11-Ctau4y8i-Ctau4y8i.png",b="/leslie-blog/assets/12-CF9wKPyx-CF9wKPyx.png",g="/leslie-blog/assets/13-D6fzHCA3-D6fzHCA3.png",m="/leslie-blog/assets/14-JZFHVIRS-JZFHVIRS.png",k="/leslie-blog/assets/15-QnD6a_OO-QnD6a_OO.png",y="/leslie-blog/assets/16-DY6uSTD1-DY6uSTD1.png",E="/leslie-blog/assets/17-CVdaspq--CVdaspq-.png",T="/leslie-blog/assets/18-ZS4gusY8-ZS4gusY8.png",f="/leslie-blog/assets/19-D1p9BNyC-D1p9BNyC.png",L="/leslie-blog/assets/20-q5yWYMJM-q5yWYMJM.png",x="/leslie-blog/assets/21-DO0JHcZB-DO0JHcZB.png",S="/leslie-blog/assets/22-Ca7r7BKK-Ca7r7BKK.png",A="/leslie-blog/assets/23-BNnrmdW0-BNnrmdW0.png",C="/leslie-blog/assets/24-9PXxomoR-9PXxomoR.png",M="/leslie-blog/assets/25-snGS08yD-snGS08yD.png",_="/leslie-blog/assets/26-DO12ex-R-DO12ex-R.png",B="/leslie-blog/assets/27-DGESCpsE-DGESCpsE.png",I="/leslie-blog/assets/28-B9Czb5XF-B9Czb5XF.png",q="/leslie-blog/assets/29-D5XhN-25-D5XhN-25.png",D="/leslie-blog/assets/30-uqDHaYTT-uqDHaYTT.png",H="/leslie-blog/assets/31-C-bmEzk9-C-bmEzk9.png",F={},w=a('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span><a href="#%E5%89%8D%E8%A8%80">前言</a></span></a></h2><p><img src="'+l+`" alt=""></p><p>对于<code>ThreadLocal</code>，大家的第一反应可能是很简单呀，线程的变量副本，每个线程隔离。那这里有几个问题大家可以思考一下：</p><ul><li><code>ThreadLocal</code>的 key 是<strong>弱引用</strong>，那么在 <code>ThreadLocal.get()</code>的时候，发生<strong>GC</strong>之后，key 是否为<strong>null</strong>？</li><li><code>ThreadLocal</code>中<code>ThreadLocalMap</code>的<strong>数据结构</strong>？</li><li><code>ThreadLocalMap</code>的<strong>Hash 算法</strong>？</li><li><code>ThreadLocalMap</code>中<strong>Hash 冲突</strong>如何解决？</li><li><code>ThreadLocalMap</code>的<strong>扩容机制</strong>？</li><li><code>ThreadLocalMap</code>中<strong>过期 key 的清理机制</strong>？<strong>探测式清理</strong>和<strong>启发式清理</strong>流程？</li><li><code>ThreadLocalMap.set()</code>方法实现原理？</li><li><code>ThreadLocalMap.get()</code>方法实现原理？</li><li>项目中<code>ThreadLocal</code>使用情况？遇到的坑？</li><li>……</li></ul><p>上述的一些问题你是否都已经掌握的很清楚了呢？本文将围绕这些问题使用图文方式来剖析<code>ThreadLocal</code>的<strong>点点滴滴</strong>。</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span><a href="#%E7%9B%AE%E5%BD%95">目录</a></span></a></h2><p><strong>注明：</strong> 本文源码基于<code>JDK 1.8</code></p><h2 id="threadlocal代码演示" tabindex="-1"><a class="header-anchor" href="#threadlocal代码演示"><span><a href="#threadlocal%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA"><code>ThreadLocal</code>代码演示</a></span></a></h2><p>我们先看下<code>ThreadLocal</code>使用示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public class ThreadLocalTest {</span></span>
<span class="line"><span>    private List&lt;String&gt; messages = Lists.newArrayList();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static final ThreadLocal&lt;ThreadLocalTest&gt; holder = ThreadLocal.withInitial(ThreadLocalTest::new);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void add(String message) {</span></span>
<span class="line"><span>        holder.get().messages.add(message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static List&lt;String&gt; clear() {</span></span>
<span class="line"><span>        List&lt;String&gt; messages = holder.get().messages;</span></span>
<span class="line"><span>        holder.remove();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        System.out.println(&quot;size: &quot; + holder.get().messages.size());</span></span>
<span class="line"><span>        return messages;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        ThreadLocalTest.add(&quot;一枝花算不算浪漫&quot;);</span></span>
<span class="line"><span>        System.out.println(holder.get().messages);</span></span>
<span class="line"><span>        ThreadLocalTest.clear();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><p><code>ThreadLocal</code>对象可以提供线程局部变量，每个线程<code>Thread</code>拥有一份自己的<strong>副本变量</strong>，多个线程互不干扰。</p><h2 id="threadlocal的数据结构" tabindex="-1"><a class="header-anchor" href="#threadlocal的数据结构"><span><a href="#threadlocal%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"><code>ThreadLocal</code>的数据结构</a></span></a></h2><p><img src="`+i+`" alt=""></p><p><code>Thread</code>类有一个类型为<code>ThreadLocal.ThreadLocalMap</code>的实例变量<code>threadLocals</code>，也就是说每个线程有一个自己的<code>ThreadLocalMap</code>。</p><p><code>ThreadLocalMap</code>有自己的独立实现，可以简单地将它的<code>key</code>视作<code>ThreadLocal</code>，<code>value</code>为代码中放入的值（实际上<code>key</code>并不是<code>ThreadLocal</code>本身，而是它的一个<strong>弱引用</strong>）。</p><p>每个线程在往<code>ThreadLocal</code>里放值的时候，都会往自己的<code>ThreadLocalMap</code>里存，读也是以<code>ThreadLocal</code>作为引用，在自己的<code>map</code>里找对应的<code>key</code>，从而实现了<strong>线程隔离</strong>。</p><p><code>ThreadLocalMap</code>有点类似<code>HashMap</code>的结构，只是<code>HashMap</code>是由<strong>数组+链表</strong>实现的，而<code>ThreadLocalMap</code>中并没有<strong>链表</strong>结构。</p><p>我们还要注意<code>Entry</code>， 它的<code>key</code>是<code>ThreadLocal&lt;?&gt; k</code> ，继承自<code>WeakReference</code>， 也就是我们常说的弱引用类型。</p><h2 id="gc-之后-key-是否为-null" tabindex="-1"><a class="header-anchor" href="#gc-之后-key-是否为-null"><span><a href="#gc-%E4%B9%8B%E5%90%8E-key-%E6%98%AF%E5%90%A6%E4%B8%BA-null">GC 之后 key 是否为 null？</a></span></a></h2><p>回应开头的那个问题， <code>ThreadLocal</code> 的<code>key</code>是弱引用，那么在<code>ThreadLocal.get()</code>的时候，发生<code>GC</code>之后，<code>key</code>是否是<code>null</code>？</p><p>为了搞清楚这个问题，我们需要搞清楚<code>Java</code>的<strong>四种引用类型</strong>：</p><ul><li><strong>强引用</strong>：我们常常 new 出来的对象就是强引用类型，只要强引用存在，垃圾回收器将永远不会回收被引用的对象，哪怕内存不足的时候</li><li><strong>软引用</strong>：使用 SoftReference 修饰的对象被称为软引用，软引用指向的对象在内存要溢出的时候被回收</li><li><strong>弱引用</strong>：使用 WeakReference 修饰的对象被称为弱引用，只要发生垃圾回收，若这个对象只被弱引用指向，那么就会被回收</li><li><strong>虚引用</strong>：虚引用是最弱的引用，在 Java 中使用 PhantomReference 进行定义。虚引用中唯一的作用就是用队列接收对象即将死亡的通知</li></ul><p>接着再来看下代码，我们使用反射的方式来看看<code>GC</code>后<code>ThreadLocal</code>中的数据情况：(下面代码来源自：<a href="https://blog.csdn.net/thewindkee/article/details/103726942" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/thewindkee/article/details/103726942</a> 本地运行演示 GC 回收场景)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public class ThreadLocalDemo {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InterruptedException {</span></span>
<span class="line"><span>        Thread t = new Thread(()-&gt;test(&quot;abc&quot;,false));</span></span>
<span class="line"><span>        t.start();</span></span>
<span class="line"><span>        t.join();</span></span>
<span class="line"><span>        System.out.println(&quot;--gc后--&quot;);</span></span>
<span class="line"><span>        Thread t2 = new Thread(() -&gt; test(&quot;def&quot;, true));</span></span>
<span class="line"><span>        t2.start();</span></span>
<span class="line"><span>        t2.join();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static void test(String s,boolean isGC)  {</span></span>
<span class="line"><span>        try {</span></span>
<span class="line"><span>            new ThreadLocal&lt;&gt;().set(s);</span></span>
<span class="line"><span>            if (isGC) {</span></span>
<span class="line"><span>                System.gc();</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            Thread t = Thread.currentThread();</span></span>
<span class="line"><span>            Class&lt;? extends Thread&gt; clz = t.getClass();</span></span>
<span class="line"><span>            Field field = clz.getDeclaredField(&quot;threadLocals&quot;);</span></span>
<span class="line"><span>            field.setAccessible(true);</span></span>
<span class="line"><span>            Object ThreadLocalMap = field.get(t);</span></span>
<span class="line"><span>            Class&lt;?&gt; tlmClass = ThreadLocalMap.getClass();</span></span>
<span class="line"><span>            Field tableField = tlmClass.getDeclaredField(&quot;table&quot;);</span></span>
<span class="line"><span>            tableField.setAccessible(true);</span></span>
<span class="line"><span>            Object[] arr = (Object[]) tableField.get(ThreadLocalMap);</span></span>
<span class="line"><span>            for (Object o : arr) {</span></span>
<span class="line"><span>                if (o != null) {</span></span>
<span class="line"><span>                    Class&lt;?&gt; entryClass = o.getClass();</span></span>
<span class="line"><span>                    Field valueField = entryClass.getDeclaredField(&quot;value&quot;);</span></span>
<span class="line"><span>                    Field referenceField = entryClass.getSuperclass().getSuperclass().getDeclaredField(&quot;referent&quot;);</span></span>
<span class="line"><span>                    valueField.setAccessible(true);</span></span>
<span class="line"><span>                    referenceField.setAccessible(true);</span></span>
<span class="line"><span>                    System.out.println(String.format(&quot;弱引用key:%s,值:%s&quot;, referenceField.get(o), valueField.get(o)));</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        } catch (Exception e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>弱引用key:java.lang.ThreadLocal@433619b6,值:abc</span></span>
<span class="line"><span>弱引用key:java.lang.ThreadLocal@418a15e3,值:java.lang.ref.SoftReference@bf97a12</span></span>
<span class="line"><span>--gc后--</span></span>
<span class="line"><span>弱引用key:null,值:def</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt=""></p><p>如图所示，因为这里创建的<code>ThreadLocal</code>并没有指向任何值，也就是没有任何引用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>new ThreadLocal&lt;&gt;().set(s);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所以这里在<code>GC</code>之后，<code>key</code>就会被回收，我们看到上面<code>debug</code>中的<code>referent=null</code>, 如果<strong>改动一下代码：</strong></p><p><img src="'+p+'" alt=""></p><p>这个问题刚开始看，如果没有过多思考，<strong>弱引用</strong>，还有<strong>垃圾回收</strong>，那么肯定会觉得是<code>null</code>。</p><p>其实是不对的，因为题目说的是在做 <code>ThreadLocal.get()</code> 操作，证明其实还是有<strong>强引用</strong>存在的，所以 <code>key</code> 并不为 <code>null</code>，如下图所示，<code>ThreadLocal</code>的<strong>强引用</strong>仍然是存在的。</p><p><img src="'+c+'" alt=""></p><p>如果我们的<strong>强引用</strong>不存在的话，那么 <code>key</code> 就会被回收，也就是会出现我们 <code>value</code> 没被回收，<code>key</code> 被回收，导致 <code>value</code> 永远存在，出现内存泄漏。</p><h2 id="threadlocal-set-方法源码详解" tabindex="-1"><a class="header-anchor" href="#threadlocal-set-方法源码详解"><span><a href="#threadlocal-set-%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3"><code>ThreadLocal.set()</code>方法源码详解</a></span></a></h2><p><img src="'+t+`" alt=""></p><p><code>ThreadLocal</code>中的<code>set</code>方法原理如上图所示，很简单，主要是判断<code>ThreadLocalMap</code>是否存在，然后使用<code>ThreadLocal</code>中的<code>set</code>方法进行数据处理。</p><p>代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public void set(T value) {</span></span>
<span class="line"><span>    Thread t = Thread.currentThread();</span></span>
<span class="line"><span>    ThreadLocalMap map = getMap(t);</span></span>
<span class="line"><span>    if (map != null)</span></span>
<span class="line"><span>        map.set(this, value);</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>        createMap(t, value);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void createMap(Thread t, T firstValue) {</span></span>
<span class="line"><span>    t.threadLocals = new ThreadLocalMap(this, firstValue);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要的核心逻辑还是在<code>ThreadLocalMap</code>中的，一步步往下看，后面还有更详细的剖析。</p><h2 id="threadlocalmap-hash-算法" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-hash-算法"><span><a href="#threadlocalmap-hash-%E7%AE%97%E6%B3%95"><code>ThreadLocalMap</code> Hash 算法</a></span></a></h2><p>既然是<code>Map</code>结构，那么<code>ThreadLocalMap</code>当然也要实现自己的<code>hash</code>算法来解决散列表数组冲突问题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int i = key.threadLocalHashCode &amp; (len-1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>ThreadLocalMap</code>中<code>hash</code>算法很简单，这里<code>i</code>就是当前 key 在散列表中对应的数组下标位置。</p><p>这里最关键的就是<code>threadLocalHashCode</code>值的计算，<code>ThreadLocal</code>中有一个属性为<code>HASH_INCREMENT = 0x61c88647</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public class ThreadLocal&lt;T&gt; {</span></span>
<span class="line"><span>    private final int threadLocalHashCode = nextHashCode();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static AtomicInteger nextHashCode = new AtomicInteger();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static final int HASH_INCREMENT = 0x61c88647;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static int nextHashCode() {</span></span>
<span class="line"><span>        return nextHashCode.getAndAdd(HASH_INCREMENT);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    static class ThreadLocalMap {</span></span>
<span class="line"><span>        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) {</span></span>
<span class="line"><span>            table = new Entry[INITIAL_CAPACITY];</span></span>
<span class="line"><span>            int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            table[i] = new Entry(firstKey, firstValue);</span></span>
<span class="line"><span>            size = 1;</span></span>
<span class="line"><span>            setThreshold(INITIAL_CAPACITY);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每当创建一个<code>ThreadLocal</code>对象，这个<code>ThreadLocal.nextHashCode</code> 这个值就会增长 <code>0x61c88647</code> 。</p><p>这个值很特殊，它是<strong>斐波那契数</strong> 也叫 <strong>黄金分割数</strong>。<code>hash</code>增量为 这个数字，带来的好处就是 <code>hash</code> <strong>分布非常均匀</strong>。</p><p>我们自己可以尝试下：</p><p><img src="`+o+'" alt=""></p><p>可以看到产生的哈希码分布很均匀，这里不去细纠<strong>斐波那契</strong>具体算法，感兴趣的可以自行查阅相关资料。</p><h2 id="threadlocalmap-hash-冲突" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-hash-冲突"><span><a href="#threadlocalmap-hash-%E5%86%B2%E7%AA%81"><code>ThreadLocalMap</code> Hash 冲突</a></span></a></h2><blockquote><p><strong>注明：</strong> 下面所有示例图中，<strong>绿色块</strong><code>Entry</code>代表<strong>正常数据</strong>，<strong>灰色块</strong>代表<code>Entry</code>的<code>key</code>值为<code>null</code>，<strong>已被垃圾回收</strong>。<strong>白色块</strong>表示<code>Entry</code>为<code>null</code>。</p></blockquote><p>虽然<code>ThreadLocalMap</code>中使用了<strong>黄金分割数</strong>来作为<code>hash</code>计算因子，大大减少了<code>Hash</code>冲突的概率，但是仍然会存在冲突。</p><p><code>HashMap</code>中解决冲突的方法是在数组上构造一个<strong>链表</strong>结构，冲突的数据挂载到链表上，如果链表长度超过一定数量则会转化成<strong>红黑树</strong>。</p><p>而 <code>ThreadLocalMap</code> 中并没有链表结构，所以这里不能使用 <code>HashMap</code> 解决冲突的方式了。</p><p><img src="'+r+'" alt=""></p><p>如上图所示，如果我们插入一个<code>value=27</code>的数据，通过 <code>hash</code> 计算后应该落入槽位 4 中，而槽位 4 已经有了 <code>Entry</code> 数据。</p><p>此时就会线性向后查找，一直找到 <code>Entry</code> 为 <code>null</code> 的槽位才会停止查找，将当前元素放入此槽位中。当然迭代过程中还有其他的情况，比如遇到了 <code>Entry</code> 不为 <code>null</code> 且 <code>key</code> 值相等的情况，还有 <code>Entry</code> 中的 <code>key</code> 值为 <code>null</code> 的情况等等都会有不同的处理，后面会一一详细讲解。</p><p>这里还画了一个<code>Entry</code>中的<code>key</code>为<code>null</code>的数据（<strong>Entry=2 的灰色块数据</strong>），因为<code>key</code>值是<strong>弱引用</strong>类型，所以会有这种数据存在。在<code>set</code>过程中，如果遇到了<code>key</code>过期的<code>Entry</code>数据，实际上是会进行一轮<strong>探测式清理</strong>操作的，具体操作方式后面会讲到。</p><h2 id="threadlocalmap-set-详解" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-set-详解"><span><a href="#threadlocalmap-set-%E8%AF%A6%E8%A7%A3"><code>ThreadLocalMap.set()</code>详解</a></span></a></h2><h3 id="threadlocalmap-set-原理图解" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-set-原理图解"><span><a href="#threadlocalmap-set-%E5%8E%9F%E7%90%86%E5%9B%BE%E8%A7%A3"><code>ThreadLocalMap.set()</code>原理图解</a></span></a></h3><p>看完了<code>ThreadLocal</code> <strong>hash 算法</strong>后，我们再来看<code>set</code>是如何实现的。</p><p>往<code>ThreadLocalMap</code>中<code>set</code>数据（<strong>新增</strong>或者<strong>更新</strong>数据）分为好几种情况，针对不同的情况我们画图来说明。</p><p><strong>第一种情况：</strong> 通过<code>hash</code>计算后的槽位对应的<code>Entry</code>数据为空：</p><p><img src="'+h+'" alt=""></p><p>这里直接将数据放到该槽位即可。</p><p><strong>第二种情况：</strong> 槽位数据不为空，<code>key</code>值与当前<code>ThreadLocal</code>通过<code>hash</code>计算获取的<code>key</code>值一致：</p><p><img src="'+v+'" alt=""></p><p>这里直接更新该槽位的数据。</p><p><strong>第三种情况：</strong> 槽位数据不为空，往后遍历过程中，在找到<code>Entry</code>为<code>null</code>的槽位之前，没有遇到<code>key</code>过期的<code>Entry</code>：</p><p><img src="'+u+'" alt=""></p><p>遍历散列数组，线性往后查找，如果找到<code>Entry</code>为<code>null</code>的槽位，则将数据放入该槽位中，或者往后遍历过程中，遇到了<strong>key 值相等</strong>的数据，直接更新即可。</p><p><strong>第四种情况：</strong> 槽位数据不为空，往后遍历过程中，在找到<code>Entry</code>为<code>null</code>的槽位之前，遇到<code>key</code>过期的<code>Entry</code>，如下图，往后遍历过程中，遇到了<code>index=7</code>的槽位数据<code>Entry</code>的<code>key=null</code>：</p><p><img src="'+b+'" alt=""></p><p>散列数组下标为 7 位置对应的<code>Entry</code>数据<code>key</code>为<code>null</code>，表明此数据<code>key</code>值已经被垃圾回收掉了，此时就会执行<code>replaceStaleEntry()</code>方法，该方法含义是<strong>替换过期数据的逻辑</strong>，以<strong>index=7</strong>位起点开始遍历，进行探测式数据清理工作。</p><p>初始化探测式清理过期数据扫描的开始位置：<code>slotToExpunge = staleSlot = 7</code></p><p>以当前<code>staleSlot</code>开始 向前迭代查找，找其他过期的数据，然后更新过期数据起始扫描下标<code>slotToExpunge</code>。<code>for</code>循环迭代，直到碰到<code>Entry</code>为<code>null</code>结束。</p><p>如果找到了过期的数据，继续向前迭代，直到遇到<code>Entry=null</code>的槽位才停止迭代，如下图所示，<strong>slotToExpunge 被更新为 0</strong>：</p><p><img src="'+g+'" alt=""></p><p>以当前节点(<code>index=7</code>)向前迭代，检测是否有过期的<code>Entry</code>数据，如果有则更新<code>slotToExpunge</code>值。碰到<code>null</code>则结束探测。以上图为例<code>slotToExpunge</code>被更新为 0。</p><p>上面向前迭代的操作是为了更新探测清理过期数据的起始下标<code>slotToExpunge</code>的值，这个值在后面会讲解，它是用来判断当前过期槽位<code>staleSlot</code>之前是否还有过期元素。</p><p>接着开始以<code>staleSlot</code>位置(<code>index=7</code>)向后迭代，<strong>如果找到了相同 key 值的 Entry 数据：</strong></p><p><img src="'+m+'" alt=""></p><p>从当前节点<code>staleSlot</code>向后查找<code>key</code>值相等的<code>Entry</code>元素，找到后更新<code>Entry</code>的值并交换<code>staleSlot</code>元素的位置(<code>staleSlot</code>位置为过期元素)，更新<code>Entry</code>数据，然后开始进行过期<code>Entry</code>的清理工作，如下图所示：</p><p><img src="https://oss.javaguide.cn/java-guide-blog/view.png" alt="">向后遍历过程中，如果没有找到相同 key 值的 Entry 数据：</p><p><img src="'+k+'" alt=""></p><p>从当前节点<code>staleSlot</code>向后查找<code>key</code>值相等的<code>Entry</code>元素，直到<code>Entry</code>为<code>null</code>则停止寻找。通过上图可知，此时<code>table</code>中没有<code>key</code>值相同的<code>Entry</code>。</p><p>创建新的<code>Entry</code>，替换<code>table[stableSlot]</code>位置：</p><p><img src="'+y+`" alt=""></p><p>替换完成后也是进行过期元素清理工作，清理工作主要是有两个方法：<code>expungeStaleEntry()</code>和<code>cleanSomeSlots()</code>，具体细节后面会讲到，请继续往后看。</p><h3 id="threadlocalmap-set-源码详解" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-set-源码详解"><span><a href="#threadlocalmap-set-%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3"><code>ThreadLocalMap.set()</code>源码详解</a></span></a></h3><p>上面已经用图的方式解析了<code>set()</code>实现的原理，其实已经很清晰了，我们接着再看下源码：</p><p><code>java.lang.ThreadLocal</code>.<code>ThreadLocalMap.set()</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private void set(ThreadLocal&lt;?&gt; key, Object value) {</span></span>
<span class="line"><span>    Entry[] tab = table;</span></span>
<span class="line"><span>    int len = tab.length;</span></span>
<span class="line"><span>    int i = key.threadLocalHashCode &amp; (len-1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for (Entry e = tab[i];</span></span>
<span class="line"><span>         e != null;</span></span>
<span class="line"><span>         e = tab[i = nextIndex(i, len)]) {</span></span>
<span class="line"><span>        ThreadLocal&lt;?&gt; k = e.get();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (k == key) {</span></span>
<span class="line"><span>            e.value = value;</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (k == null) {</span></span>
<span class="line"><span>            replaceStaleEntry(key, value, i);</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    tab[i] = new Entry(key, value);</span></span>
<span class="line"><span>    int sz = ++size;</span></span>
<span class="line"><span>    if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span></span>
<span class="line"><span>        rehash();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会通过<code>key</code>来计算在散列表中的对应位置，然后以当前<code>key</code>对应的桶的位置向后查找，找到可以使用的桶。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Entry[] tab = table;</span></span>
<span class="line"><span>int len = tab.length;</span></span>
<span class="line"><span>int i = key.threadLocalHashCode &amp; (len-1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么情况下桶才是可以使用的呢？</p><ol><li><code>k = key</code> 说明是替换操作，可以使用</li><li>碰到一个过期的桶，执行替换逻辑，占用过期桶</li><li>查找过程中，碰到桶中<code>Entry=null</code>的情况，直接使用</li></ol><p>接着就是执行<code>for</code>循环遍历，向后查找，我们先看下<code>nextIndex()</code>、<code>prevIndex()</code>方法实现：</p><p><img src="`+E+`" alt=""></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private static int nextIndex(int i, int len) {</span></span>
<span class="line"><span>    return ((i + 1 &lt; len) ? i + 1 : 0);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>private static int prevIndex(int i, int len) {</span></span>
<span class="line"><span>    return ((i - 1 &gt;= 0) ? i - 1 : len - 1);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着看剩下<code>for</code>循环中的逻辑：</p><ol><li>遍历当前<code>key</code>值对应的桶中<code>Entry</code>数据为空，这说明散列数组这里没有数据冲突，跳出<code>for</code>循环，直接<code>set</code>数据到对应的桶中</li><li>如果<code>key</code>值对应的桶中<code>Entry</code>数据不为空<br> 2.1 如果<code>k = key</code>，说明当前<code>set</code>操作是一个替换操作，做替换逻辑，直接返回<br> 2.2 如果<code>key = null</code>，说明当前桶位置的<code>Entry</code>是过期数据，执行<code>replaceStaleEntry()</code>方法(核心方法)，然后返回</li><li><code>for</code>循环执行完毕，继续往下执行说明向后迭代的过程中遇到了<code>entry</code>为<code>null</code>的情况<br> 3.1 在<code>Entry</code>为<code>null</code>的桶中创建一个新的<code>Entry</code>对象<br> 3.2 执行<code>++size</code>操作</li><li>调用<code>cleanSomeSlots()</code>做一次启发式清理工作，清理散列数组中<code>Entry</code>的<code>key</code>过期的数据<br> 4.1 如果清理工作完成后，未清理到任何数据，且<code>size</code>超过了阈值(数组长度的 2/3)，进行<code>rehash()</code>操作<br> 4.2 <code>rehash()</code>中会先进行一轮探测式清理，清理过期<code>key</code>，清理完成后如果<strong>size &gt;= threshold - threshold / 4</strong>，就会执行真正的扩容逻辑(扩容逻辑往后看)</li></ol><p>接着重点看下<code>replaceStaleEntry()</code>方法，<code>replaceStaleEntry()</code>方法提供替换过期数据的功能，我们可以对应上面<strong>第四种情况</strong>的原理图来再回顾下，具体代码如下：</p><p><code>java.lang.ThreadLocal.ThreadLocalMap.replaceStaleEntry()</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private void replaceStaleEntry(ThreadLocal&lt;?&gt; key, Object value,</span></span>
<span class="line"><span>                                       int staleSlot) {</span></span>
<span class="line"><span>    Entry[] tab = table;</span></span>
<span class="line"><span>    int len = tab.length;</span></span>
<span class="line"><span>    Entry e;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    int slotToExpunge = staleSlot;</span></span>
<span class="line"><span>    for (int i = prevIndex(staleSlot, len);</span></span>
<span class="line"><span>         (e = tab[i]) != null;</span></span>
<span class="line"><span>         i = prevIndex(i, len))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (e.get() == null)</span></span>
<span class="line"><span>            slotToExpunge = i;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for (int i = nextIndex(staleSlot, len);</span></span>
<span class="line"><span>         (e = tab[i]) != null;</span></span>
<span class="line"><span>         i = nextIndex(i, len)) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ThreadLocal&lt;?&gt; k = e.get();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (k == key) {</span></span>
<span class="line"><span>            e.value = value;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            tab[i] = tab[staleSlot];</span></span>
<span class="line"><span>            tab[staleSlot] = e;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            if (slotToExpunge == staleSlot)</span></span>
<span class="line"><span>                slotToExpunge = i;</span></span>
<span class="line"><span>            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (k == null &amp;&amp; slotToExpunge == staleSlot)</span></span>
<span class="line"><span>            slotToExpunge = i;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    tab[staleSlot].value = null;</span></span>
<span class="line"><span>    tab[staleSlot] = new Entry(key, value);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (slotToExpunge != staleSlot)</span></span>
<span class="line"><span>        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>slotToExpunge</code>表示开始探测式清理过期数据的开始下标，默认从当前的<code>staleSlot</code>开始。以当前的<code>staleSlot</code>开始，向前迭代查找，找到没有过期的数据，<code>for</code>循环一直碰到<code>Entry</code>为<code>null</code>才会结束。如果向前找到了过期数据，更新探测清理过期数据的开始下标为 i，即<code>slotToExpunge=i</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>for (int i = prevIndex(staleSlot, len);</span></span>
<span class="line"><span>     (e = tab[i]) != null;</span></span>
<span class="line"><span>     i = prevIndex(i, len)){</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (e.get() == null){</span></span>
<span class="line"><span>        slotToExpunge = i;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着开始从<code>staleSlot</code>向后查找，也是碰到<code>Entry</code>为<code>null</code>的桶结束。<br> 如果迭代过程中，<strong>碰到 k == key</strong>，这说明这里是替换逻辑，替换新数据并且交换当前<code>staleSlot</code>位置。如果<code>slotToExpunge == staleSlot</code>，这说明<code>replaceStaleEntry()</code>一开始向前查找过期数据时并未找到过期的<code>Entry</code>数据，接着向后查找过程中也未发现过期数据，修改开始探测式清理过期数据的下标为当前循环的 index，即<code>slotToExpunge = i</code>。最后调用<code>cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</code>进行启发式过期数据清理。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>if (k == key) {</span></span>
<span class="line"><span>    e.value = value;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    tab[i] = tab[staleSlot];</span></span>
<span class="line"><span>    tab[staleSlot] = e;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (slotToExpunge == staleSlot)</span></span>
<span class="line"><span>        slotToExpunge = i;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cleanSomeSlots()</code>和<code>expungeStaleEntry()</code>方法后面都会细讲，这两个是和清理相关的方法，一个是过期<code>key</code>相关<code>Entry</code>的启发式清理(<code>Heuristically scan</code>)，另一个是过期<code>key</code>相关<code>Entry</code>的探测式清理。</p><p><strong>如果 k != key</strong>则会接着往下走，<code>k == null</code>说明当前遍历的<code>Entry</code>是一个过期数据，<code>slotToExpunge == staleSlot</code>说明，一开始的向前查找数据并未找到过期的<code>Entry</code>。如果条件成立，则更新<code>slotToExpunge</code> 为当前位置，这个前提是前驱节点扫描时未发现过期数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>if (k == null &amp;&amp; slotToExpunge == staleSlot)</span></span>
<span class="line"><span>    slotToExpunge = i;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>往后迭代的过程中如果没有找到<code>k == key</code>的数据，且碰到<code>Entry</code>为<code>null</code>的数据，则结束当前的迭代操作。此时说明这里是一个添加的逻辑，将新的数据添加到<code>table[staleSlot]</code> 对应的<code>slot</code>中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>tab[staleSlot].value = null;</span></span>
<span class="line"><span>tab[staleSlot] = new Entry(key, value);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后判断除了<code>staleSlot</code>以外，还发现了其他过期的<code>slot</code>数据，就要开启清理数据的逻辑：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>if (slotToExpunge != staleSlot)</span></span>
<span class="line"><span>    cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="threadlocalmap过期-key-的探测式清理流程" tabindex="-1"><a class="header-anchor" href="#threadlocalmap过期-key-的探测式清理流程"><span><a href="#threadlocalmap%E8%BF%87%E6%9C%9F-key-%E7%9A%84%E6%8E%A2%E6%B5%8B%E5%BC%8F%E6%B8%85%E7%90%86%E6%B5%81%E7%A8%8B"><code>ThreadLocalMap</code>过期 key 的探测式清理流程</a></span></a></h2><p>上面我们有提及<code>ThreadLocalMap</code>的两种过期<code>key</code>数据清理方式：<strong>探测式清理</strong>和<strong>启发式清理</strong>。</p><p>我们先讲下探测式清理，也就是<code>expungeStaleEntry</code>方法，遍历散列数组，从开始位置向后探测清理过期数据，将过期数据的<code>Entry</code>设置为<code>null</code>，沿途中碰到未过期的数据则将此数据<code>rehash</code>后重新在<code>table</code>数组中定位，如果定位的位置已经有了数据，则会将未过期的数据放到最靠近此位置的<code>Entry=null</code>的桶中，使<code>rehash</code>后的<code>Entry</code>数据距离正确的桶的位置更近一些。操作逻辑如下：</p><p><img src="`+T+'" alt=""></p><p>如上图，<code>set(27)</code> 经过 hash 计算后应该落到<code>index=4</code>的桶中，由于<code>index=4</code>桶已经有了数据，所以往后迭代最终数据放入到<code>index=7</code>的桶中，放入后一段时间后<code>index=5</code>中的<code>Entry</code>数据<code>key</code>变为了<code>null</code></p><p><img src="'+f+'" alt=""></p><p>如果再有其他数据<code>set</code>到<code>map</code>中，就会触发<strong>探测式清理</strong>操作。</p><p>如上图，执行<strong>探测式清理</strong>后，<code>index=5</code>的数据被清理掉，继续往后迭代，到<code>index=7</code>的元素时，经过<code>rehash</code>后发现该元素正确的<code>index=4</code>，而此位置已经有了数据，往后查找离<code>index=4</code>最近的<code>Entry=null</code>的节点(刚被探测式清理掉的数据：<code>index=5</code>)，找到后移动<code>index= 7</code>的数据到<code>index=5</code>中，此时桶的位置离正确的位置<code>index=4</code>更近了。</p><p>经过一轮探测式清理后，<code>key</code>过期的数据会被清理掉，没过期的数据经过<code>rehash</code>重定位后所处的桶位置理论上更接近<code>i= key.hashCode &amp; (tab.len - 1)</code>的位置。这种优化会提高整个散列表查询性能。</p><p>接着看下<code>expungeStaleEntry()</code>具体流程，我们还是以先原理图后源码讲解的方式来一步步梳理：</p><p><img src="'+L+'" alt=""></p><p>我们假设<code>expungeStaleEntry(3)</code> 来调用此方法，如上图所示，我们可以看到<code>ThreadLocalMap</code>中<code>table</code>的数据情况，接着执行清理操作：</p><p><img src="'+x+'" alt=""></p><p>第一步是清空当前<code>staleSlot</code>位置的数据，<code>index=3</code>位置的<code>Entry</code>变成了<code>null</code>。然后接着往后探测：</p><p><img src="'+S+'" alt=""></p><p>执行完第二步后，index=4 的元素挪到 index=3 的槽位中。</p><p>继续往后迭代检查，碰到正常数据，计算该数据位置是否偏移，如果被偏移，则重新计算<code>slot</code>位置，目的是让正常数据尽可能存放在正确位置或离正确位置更近的位置</p><p><img src="'+A+`" alt=""></p><p>在往后迭代的过程中碰到空的槽位，终止探测，这样一轮探测式清理工作就完成了，接着我们继续看看具体<strong>实现源代码</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private int expungeStaleEntry(int staleSlot) {</span></span>
<span class="line"><span>    Entry[] tab = table;</span></span>
<span class="line"><span>    int len = tab.length;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    tab[staleSlot].value = null;</span></span>
<span class="line"><span>    tab[staleSlot] = null;</span></span>
<span class="line"><span>    size--;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Entry e;</span></span>
<span class="line"><span>    int i;</span></span>
<span class="line"><span>    for (i = nextIndex(staleSlot, len);</span></span>
<span class="line"><span>         (e = tab[i]) != null;</span></span>
<span class="line"><span>         i = nextIndex(i, len)) {</span></span>
<span class="line"><span>        ThreadLocal&lt;?&gt; k = e.get();</span></span>
<span class="line"><span>        if (k == null) {</span></span>
<span class="line"><span>            e.value = null;</span></span>
<span class="line"><span>            tab[i] = null;</span></span>
<span class="line"><span>            size--;</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            int h = k.threadLocalHashCode &amp; (len - 1);</span></span>
<span class="line"><span>            if (h != i) {</span></span>
<span class="line"><span>                tab[i] = null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                while (tab[h] != null)</span></span>
<span class="line"><span>                    h = nextIndex(h, len);</span></span>
<span class="line"><span>                tab[h] = e;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return i;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们还是以<code>staleSlot=3</code> 来做示例说明，首先是将<code>tab[staleSlot]</code>槽位的数据清空，然后设置<code>size--</code><br> 接着以<code>staleSlot</code>位置往后迭代，如果遇到<code>k==null</code>的过期数据，也是清空该槽位数据，然后<code>size--</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ThreadLocal&lt;?&gt; k = e.get();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (k == null) {</span></span>
<span class="line"><span>    e.value = null;</span></span>
<span class="line"><span>    tab[i] = null;</span></span>
<span class="line"><span>    size--;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>key</code>没有过期，重新计算当前<code>key</code>的下标位置是不是当前槽位下标位置，如果不是，那么说明产生了<code>hash</code>冲突，此时以新计算出来正确的槽位位置往后迭代，找到最近一个可以存放<code>entry</code>的位置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>int h = k.threadLocalHashCode &amp; (len - 1);</span></span>
<span class="line"><span>if (h != i) {</span></span>
<span class="line"><span>    tab[i] = null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    while (tab[h] != null)</span></span>
<span class="line"><span>        h = nextIndex(h, len);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    tab[h] = e;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是处理正常的产生<code>Hash</code>冲突的数据，经过迭代后，有过<code>Hash</code>冲突数据的<code>Entry</code>位置会更靠近正确位置，这样的话，查询的时候 效率才会更高。</p><h2 id="threadlocalmap扩容机制" tabindex="-1"><a class="header-anchor" href="#threadlocalmap扩容机制"><span><a href="#threadlocalmap%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6"><code>ThreadLocalMap</code>扩容机制</a></span></a></h2><p>在<code>ThreadLocalMap.set()</code>方法的最后，如果执行完启发式清理工作后，未清理到任何数据，且当前散列数组中<code>Entry</code>的数量已经达到了列表的扩容阈值<code>(len*2/3)</code>，就开始执行<code>rehash()</code>逻辑：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span></span>
<span class="line"><span>    rehash();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着看下<code>rehash()</code>具体实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private void rehash() {</span></span>
<span class="line"><span>    expungeStaleEntries();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (size &gt;= threshold - threshold / 4)</span></span>
<span class="line"><span>        resize();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>private void expungeStaleEntries() {</span></span>
<span class="line"><span>    Entry[] tab = table;</span></span>
<span class="line"><span>    int len = tab.length;</span></span>
<span class="line"><span>    for (int j = 0; j &lt; len; j++) {</span></span>
<span class="line"><span>        Entry e = tab[j];</span></span>
<span class="line"><span>        if (e != null &amp;&amp; e.get() == null)</span></span>
<span class="line"><span>            expungeStaleEntry(j);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里首先是会进行探测式清理工作，从<code>table</code>的起始位置往后清理，上面有分析清理的详细流程。清理完成之后，<code>table</code>中可能有一些<code>key</code>为<code>null</code>的<code>Entry</code>数据被清理掉，所以此时通过判断<code>size &gt;= threshold - threshold / 4</code> 也就是<code>size &gt;= threshold * 3/4</code> 来决定是否扩容。</p><p>我们还记得上面进行<code>rehash()</code>的阈值是<code>size &gt;= threshold</code>，所以当面试官套路我们<code>ThreadLocalMap</code>扩容机制的时候 我们一定要说清楚这两个步骤：</p><p><img src="`+C+'" alt=""></p><p>接着看看具体的<code>resize()</code>方法，为了方便演示，我们以<code>oldTab.len=8</code>来举例：</p><p><img src="'+M+`" alt=""></p><p>扩容后的<code>tab</code>的大小为<code>oldLen * 2</code>，然后遍历老的散列表，重新计算<code>hash</code>位置，然后放到新的<code>tab</code>数组中，如果出现<code>hash</code>冲突则往后寻找最近的<code>entry</code>为<code>null</code>的槽位，遍历完成之后，<code>oldTab</code>中所有的<code>entry</code>数据都已经放入到新的<code>tab</code>中了。重新计算<code>tab</code>下次扩容的<strong>阈值</strong>，具体代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private void resize() {</span></span>
<span class="line"><span>    Entry[] oldTab = table;</span></span>
<span class="line"><span>    int oldLen = oldTab.length;</span></span>
<span class="line"><span>    int newLen = oldLen * 2;</span></span>
<span class="line"><span>    Entry[] newTab = new Entry[newLen];</span></span>
<span class="line"><span>    int count = 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for (int j = 0; j &lt; oldLen; ++j) {</span></span>
<span class="line"><span>        Entry e = oldTab[j];</span></span>
<span class="line"><span>        if (e != null) {</span></span>
<span class="line"><span>            ThreadLocal&lt;?&gt; k = e.get();</span></span>
<span class="line"><span>            if (k == null) {</span></span>
<span class="line"><span>                e.value = null;</span></span>
<span class="line"><span>            } else {</span></span>
<span class="line"><span>                int h = k.threadLocalHashCode &amp; (newLen - 1);</span></span>
<span class="line"><span>                while (newTab[h] != null)</span></span>
<span class="line"><span>                    h = nextIndex(h, newLen);</span></span>
<span class="line"><span>                newTab[h] = e;</span></span>
<span class="line"><span>                count++;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    setThreshold(newLen);</span></span>
<span class="line"><span>    size = count;</span></span>
<span class="line"><span>    table = newTab;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="threadlocalmap-get-详解" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-get-详解"><span><a href="#threadlocalmap-get-%E8%AF%A6%E8%A7%A3"><code>ThreadLocalMap.get()</code>详解</a></span></a></h2><p>上面已经看完了<code>set()</code>方法的源码，其中包括<code>set</code>数据、清理数据、优化数据桶的位置等操作，接着看看<code>get()</code>操作的原理。</p><h3 id="threadlocalmap-get-图解" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-get-图解"><span><a href="#threadlocalmap-get-%E5%9B%BE%E8%A7%A3"><code>ThreadLocalMap.get()</code>图解</a></span></a></h3><p><strong>第一种情况：</strong> 通过查找<code>key</code>值计算出散列表中<code>slot</code>位置，然后该<code>slot</code>位置中的<code>Entry.key</code>和查找的<code>key</code>一致，则直接返回：</p><p><img src="`+_+'" alt=""></p><p><strong>第二种情况：</strong> <code>slot</code>位置中的<code>Entry.key</code>和要查找的<code>key</code>不一致：</p><p><img src="'+B+'" alt=""></p><p>我们以<code>get(ThreadLocal1)</code>为例，通过<code>hash</code>计算后，正确的<code>slot</code>位置应该是 4，而<code>index=4</code>的槽位已经有了数据，且<code>key</code>值不等于<code>ThreadLocal1</code>，所以需要继续往后迭代查找。</p><p>迭代到<code>index=5</code>的数据时，此时<code>Entry.key=null</code>，触发一次探测式数据回收操作，执行<code>expungeStaleEntry()</code>方法，执行完后，<code>index 5,8</code>的数据都会被回收，而<code>index 6,7</code>的数据都会前移。<code>index 6,7</code>前移之后，继续从 <code>index=5</code> 往后迭代，于是就在 <code>index=6</code> 找到了<code>key</code>值相等的<code>Entry</code>数据，如下图所示：</p><p><img src="'+I+`" alt=""></p><h3 id="threadlocalmap-get-源码详解" tabindex="-1"><a class="header-anchor" href="#threadlocalmap-get-源码详解"><span><a href="#threadlocalmap-get-%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3"><code>ThreadLocalMap.get()</code>源码详解</a></span></a></h3><p><code>java.lang.ThreadLocal.ThreadLocalMap.getEntry()</code>:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private Entry getEntry(ThreadLocal&lt;?&gt; key) {</span></span>
<span class="line"><span>    int i = key.threadLocalHashCode &amp; (table.length - 1);</span></span>
<span class="line"><span>    Entry e = table[i];</span></span>
<span class="line"><span>    if (e != null &amp;&amp; e.get() == key)</span></span>
<span class="line"><span>        return e;</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>        return getEntryAfterMiss(key, i, e);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) {</span></span>
<span class="line"><span>    Entry[] tab = table;</span></span>
<span class="line"><span>    int len = tab.length;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    while (e != null) {</span></span>
<span class="line"><span>        ThreadLocal&lt;?&gt; k = e.get();</span></span>
<span class="line"><span>        if (k == key)</span></span>
<span class="line"><span>            return e;</span></span>
<span class="line"><span>        if (k == null)</span></span>
<span class="line"><span>            expungeStaleEntry(i);</span></span>
<span class="line"><span>        else</span></span>
<span class="line"><span>            i = nextIndex(i, len);</span></span>
<span class="line"><span>        e = tab[i];</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return null;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="threadlocalmap过期-key-的启发式清理流程" tabindex="-1"><a class="header-anchor" href="#threadlocalmap过期-key-的启发式清理流程"><span><a href="#threadlocalmap%E8%BF%87%E6%9C%9F-key-%E7%9A%84%E5%90%AF%E5%8F%91%E5%BC%8F%E6%B8%85%E7%90%86%E6%B5%81%E7%A8%8B"><code>ThreadLocalMap</code>过期 key 的启发式清理流程</a></span></a></h2><p>上面多次提及到<code>ThreadLocalMap</code>过期 key 的两种清理方式：<strong>探测式清理(expungeStaleEntry())</strong>、<strong>启发式清理(cleanSomeSlots())</strong></p><p>探测式清理是以当前<code>Entry</code> 往后清理，遇到值为<code>null</code>则结束清理，属于<strong>线性探测清理</strong>。</p><p>而启发式清理被作者定义为：<strong>Heuristically scan some cells looking for stale entries</strong>.</p><p><img src="`+q+`" alt=""></p><p>具体代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private boolean cleanSomeSlots(int i, int n) {</span></span>
<span class="line"><span>    boolean removed = false;</span></span>
<span class="line"><span>    Entry[] tab = table;</span></span>
<span class="line"><span>    int len = tab.length;</span></span>
<span class="line"><span>    do {</span></span>
<span class="line"><span>        i = nextIndex(i, len);</span></span>
<span class="line"><span>        Entry e = tab[i];</span></span>
<span class="line"><span>        if (e != null &amp;&amp; e.get() == null) {</span></span>
<span class="line"><span>            n = len;</span></span>
<span class="line"><span>            removed = true;</span></span>
<span class="line"><span>            i = expungeStaleEntry(i);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    } while ( (n &gt;&gt;&gt;= 1) != 0);</span></span>
<span class="line"><span>    return removed;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inheritablethreadlocal" tabindex="-1"><a class="header-anchor" href="#inheritablethreadlocal"><span><a href="#inheritablethreadlocal"><code>InheritableThreadLocal</code></a></span></a></h2><p>我们使用<code>ThreadLocal</code>的时候，在异步场景下是无法给子线程共享父线程中创建的线程副本数据的。</p><p>为了解决这个问题，JDK 中还有一个<code>InheritableThreadLocal</code>类，我们来看一个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public class InheritableThreadLocalDemo {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        ThreadLocal&lt;String&gt; ThreadLocal = new ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span>        ThreadLocal&lt;String&gt; inheritableThreadLocal = new InheritableThreadLocal&lt;&gt;();</span></span>
<span class="line"><span>        ThreadLocal.set(&quot;父类数据:threadLocal&quot;);</span></span>
<span class="line"><span>        inheritableThreadLocal.set(&quot;父类数据:inheritableThreadLocal&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        new Thread(new Runnable() {</span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public void run() {</span></span>
<span class="line"><span>                System.out.println(&quot;子线程获取父类ThreadLocal数据：&quot; + ThreadLocal.get());</span></span>
<span class="line"><span>                System.out.println(&quot;子线程获取父类inheritableThreadLocal数据：&quot; + inheritableThreadLocal.get());</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }).start();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>子线程获取父类ThreadLocal数据：null</span></span>
<span class="line"><span>子线程获取父类inheritableThreadLocal数据：父类数据:inheritableThreadLocal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>实现原理是子线程是通过在父线程中通过调用<code>new Thread()</code>方法来创建子线程，<code>Thread#init</code>方法在<code>Thread</code>的构造方法中被调用。在<code>init</code>方法中拷贝父线程数据到子线程中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private void init(ThreadGroup g, Runnable target, String name,</span></span>
<span class="line"><span>                      long stackSize, AccessControlContext acc,</span></span>
<span class="line"><span>                      boolean inheritThreadLocals) {</span></span>
<span class="line"><span>    if (name == null) {</span></span>
<span class="line"><span>        throw new NullPointerException(&quot;name cannot be null&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != null)</span></span>
<span class="line"><span>        this.inheritableThreadLocals =</span></span>
<span class="line"><span>            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span></span>
<span class="line"><span>    this.stackSize = stackSize;</span></span>
<span class="line"><span>    tid = nextThreadID();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但<code>InheritableThreadLocal</code>仍然有缺陷，一般我们做异步化处理都是使用的线程池，而<code>InheritableThreadLocal</code>是在<code>new Thread</code>中的<code>init()</code>方法给赋值的，而线程池是线程复用的逻辑，所以这里会存在问题。</p><p>当然，有问题出现就会有解决问题的方案，阿里巴巴开源了一个<code>TransmittableThreadLocal</code>组件就可以解决这个问题，这里就不再延伸，感兴趣的可自行查阅资料。</p><h2 id="threadlocal项目中使用实战" tabindex="-1"><a class="header-anchor" href="#threadlocal项目中使用实战"><span><a href="#threadlocal%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AE%9E%E6%88%98"><code>ThreadLocal</code>项目中使用实战</a></span></a></h2><h3 id="threadlocal使用场景" tabindex="-1"><a class="header-anchor" href="#threadlocal使用场景"><span><a href="#threadlocal%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"><code>ThreadLocal</code>使用场景</a></span></a></h3><p>我们现在项目中日志记录用的是<code>ELK+Logstash</code>，最后在<code>Kibana</code>中进行展示和检索。</p><p>现在都是分布式系统统一对外提供服务，项目间调用的关系可以通过 <code>traceId</code> 来关联，但是不同项目之间如何传递 <code>traceId</code> 呢？</p><p>这里我们使用 <code>org.slf4j.MDC</code> 来实现此功能，内部就是通过 <code>ThreadLocal</code> 来实现的，具体实现如下：</p><p>当前端发送请求到<strong>服务 A</strong>时，<strong>服务 A</strong>会生成一个类似<code>UUID</code>的<code>traceId</code>字符串，将此字符串放入当前线程的<code>ThreadLocal</code>中，在调用<strong>服务 B</strong>的时候，将<code>traceId</code>写入到请求的<code>Header</code>中，<strong>服务 B</strong>在接收请求时会先判断请求的<code>Header</code>中是否有<code>traceId</code>，如果存在则写入自己线程的<code>ThreadLocal</code>中。</p><p><img src="`+D+'" alt=""></p><p>图中的<code>requestId</code>即为我们各个系统链路关联的<code>traceId</code>，系统间互相调用，通过这个<code>requestId</code>即可找到对应链路，这里还有会有一些其他场景：</p><p><img src="'+H+`" alt=""></p><p>针对于这些场景，我们都可以有相应的解决方案，如下所示</p><h3 id="feign-远程调用解决方案" tabindex="-1"><a class="header-anchor" href="#feign-远程调用解决方案"><span><a href="#feign-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">Feign 远程调用解决方案</a></span></a></h3><p><strong>服务发送请求：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>public class FeignInvokeInterceptor implements RequestInterceptor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void apply(RequestTemplate template) {</span></span>
<span class="line"><span>        String requestId = MDC.get(&quot;requestId&quot;);</span></span>
<span class="line"><span>        if (StringUtils.isNotBlank(requestId)) {</span></span>
<span class="line"><span>            template.header(&quot;requestId&quot;, requestId);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>服务接收请求：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class LogInterceptor extends HandlerInterceptorAdapter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3) {</span></span>
<span class="line"><span>        MDC.remove(&quot;requestId&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3) {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        String requestId = request.getHeader(BaseConstant.REQUEST_ID_KEY);</span></span>
<span class="line"><span>        if (StringUtils.isBlank(requestId)) {</span></span>
<span class="line"><span>            requestId = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        MDC.put(&quot;requestId&quot;, requestId);</span></span>
<span class="line"><span>        return true;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池异步调用-requestid-传递" tabindex="-1"><a class="header-anchor" href="#线程池异步调用-requestid-传递"><span><a href="#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8-requestid-%E4%BC%A0%E9%80%92">线程池异步调用，requestId 传递</a></span></a></h3><p>因为<code>MDC</code>是基于<code>ThreadLocal</code>去实现的，异步过程中，子线程并没有办法获取到父线程<code>ThreadLocal</code>存储的数据，所以这里可以自定义线程池执行器，修改其中的<code>run()</code>方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>public class MyThreadPoolTaskExecutor extends ThreadPoolTaskExecutor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void execute(Runnable runnable) {</span></span>
<span class="line"><span>        Map&lt;String, String&gt; context = MDC.getCopyOfContextMap();</span></span>
<span class="line"><span>        super.execute(() -&gt; run(runnable, context));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    private void run(Runnable runnable, Map&lt;String, String&gt; context) {</span></span>
<span class="line"><span>        if (context != null) {</span></span>
<span class="line"><span>            MDC.setContextMap(context);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        try {</span></span>
<span class="line"><span>            runnable.run();</span></span>
<span class="line"><span>        } finally {</span></span>
<span class="line"><span>            MDC.remove();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-mq-发送消息给第三方系统" tabindex="-1"><a class="header-anchor" href="#使用-mq-发送消息给第三方系统"><span><a href="#%E4%BD%BF%E7%94%A8-mq-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%BB%99%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B3%BB%E7%BB%9F">使用 MQ 发送消息给第三方系统</a></span></a></h3><p>在 MQ 发送的消息体中自定义属性<code>requestId</code>，接收方消费消息后，自己解析<code>requestId</code>使用即可。</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>REF</span></a></h2><p>原文地址：<a href="https://juejin.cn/post/6844904151567040519" target="_blank" rel="noopener noreferrer">面试官：小伙子，听说你看过ThreadLocal源码？（万字图文深度解析ThreadLocal）</a></p>`,209),j=[w];function z(R,G){return n(),e("div",null,j)}const J=s(F,[["render",z],["__file","ThreadLocalJavaGuide.html.vue"]]),Y=JSON.parse('{"path":"/java/concurrency/ThreadLocalJavaGuide.html","title":"ThreadLocal 详解 - Java Guide","lang":"zh-CN","frontmatter":{"title":"ThreadLocal 详解 - Java Guide","author":"Evan","editLink":false,"comment":false,"tag":["Android"],"date":"2025-03-26T00:00:00.000Z","description":"前言 对于ThreadLocal，大家的第一反应可能是很简单呀，线程的变量副本，每个线程隔离。那这里有几个问题大家可以思考一下： ThreadLocal的 key 是弱引用，那么在 ThreadLocal.get()的时候，发生GC之后，key 是否为null？ ThreadLocal中ThreadLocalMap的数据结构？ ThreadLocalM...","head":[["meta",{"property":"og:url","content":"https://leslie-dd.github.io/leslie-blog/leslie-blog/java/concurrency/ThreadLocalJavaGuide.html"}],["meta",{"property":"og:site_name","content":"Evan 的博客"}],["meta",{"property":"og:title","content":"ThreadLocal 详解 - Java Guide"}],["meta",{"property":"og:description","content":"前言 对于ThreadLocal，大家的第一反应可能是很简单呀，线程的变量副本，每个线程隔离。那这里有几个问题大家可以思考一下： ThreadLocal的 key 是弱引用，那么在 ThreadLocal.get()的时候，发生GC之后，key 是否为null？ ThreadLocal中ThreadLocalMap的数据结构？ ThreadLocalM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/java-guide-blog/view.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-26T11:35:27.000Z"}],["meta",{"property":"article:author","content":"Evan"}],["meta",{"property":"article:tag","content":"Android"}],["meta",{"property":"article:published_time","content":"2025-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-26T11:35:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreadLocal 详解 - Java Guide\\",\\"image\\":[\\"https://oss.javaguide.cn/java-guide-blog/view.png\\"],\\"datePublished\\":\\"2025-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-26T11:35:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Evan\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"ThreadLocal代码演示","slug":"threadlocal代码演示","link":"#threadlocal代码演示","children":[]},{"level":2,"title":"ThreadLocal的数据结构","slug":"threadlocal的数据结构","link":"#threadlocal的数据结构","children":[]},{"level":2,"title":"GC 之后 key 是否为 null？","slug":"gc-之后-key-是否为-null","link":"#gc-之后-key-是否为-null","children":[]},{"level":2,"title":"ThreadLocal.set()方法源码详解","slug":"threadlocal-set-方法源码详解","link":"#threadlocal-set-方法源码详解","children":[]},{"level":2,"title":"ThreadLocalMap Hash 算法","slug":"threadlocalmap-hash-算法","link":"#threadlocalmap-hash-算法","children":[]},{"level":2,"title":"ThreadLocalMap Hash 冲突","slug":"threadlocalmap-hash-冲突","link":"#threadlocalmap-hash-冲突","children":[]},{"level":2,"title":"ThreadLocalMap.set()详解","slug":"threadlocalmap-set-详解","link":"#threadlocalmap-set-详解","children":[{"level":3,"title":"ThreadLocalMap.set()原理图解","slug":"threadlocalmap-set-原理图解","link":"#threadlocalmap-set-原理图解","children":[]},{"level":3,"title":"ThreadLocalMap.set()源码详解","slug":"threadlocalmap-set-源码详解","link":"#threadlocalmap-set-源码详解","children":[]}]},{"level":2,"title":"ThreadLocalMap过期 key 的探测式清理流程","slug":"threadlocalmap过期-key-的探测式清理流程","link":"#threadlocalmap过期-key-的探测式清理流程","children":[]},{"level":2,"title":"ThreadLocalMap扩容机制","slug":"threadlocalmap扩容机制","link":"#threadlocalmap扩容机制","children":[]},{"level":2,"title":"ThreadLocalMap.get()详解","slug":"threadlocalmap-get-详解","link":"#threadlocalmap-get-详解","children":[{"level":3,"title":"ThreadLocalMap.get()图解","slug":"threadlocalmap-get-图解","link":"#threadlocalmap-get-图解","children":[]},{"level":3,"title":"ThreadLocalMap.get()源码详解","slug":"threadlocalmap-get-源码详解","link":"#threadlocalmap-get-源码详解","children":[]}]},{"level":2,"title":"ThreadLocalMap过期 key 的启发式清理流程","slug":"threadlocalmap过期-key-的启发式清理流程","link":"#threadlocalmap过期-key-的启发式清理流程","children":[]},{"level":2,"title":"InheritableThreadLocal","slug":"inheritablethreadlocal","link":"#inheritablethreadlocal","children":[]},{"level":2,"title":"ThreadLocal项目中使用实战","slug":"threadlocal项目中使用实战","link":"#threadlocal项目中使用实战","children":[{"level":3,"title":"ThreadLocal使用场景","slug":"threadlocal使用场景","link":"#threadlocal使用场景","children":[]},{"level":3,"title":"Feign 远程调用解决方案","slug":"feign-远程调用解决方案","link":"#feign-远程调用解决方案","children":[]},{"level":3,"title":"线程池异步调用，requestId 传递","slug":"线程池异步调用-requestid-传递","link":"#线程池异步调用-requestid-传递","children":[]},{"level":3,"title":"使用 MQ 发送消息给第三方系统","slug":"使用-mq-发送消息给第三方系统","link":"#使用-mq-发送消息给第三方系统","children":[]}]},{"level":2,"title":"REF","slug":"ref","link":"#ref","children":[]}],"git":{"createdTime":1742984764000,"updatedTime":1742988927000,"contributors":[{"name":"Leslie","email":"LeslieDYF@gmail.com","commits":2}]},"readingTime":{"minutes":23.92,"words":7175},"filePathRelative":"java/concurrency/ThreadLocalJavaGuide.md","localizedDate":"2025年3月26日","excerpt":"<h2><a class=\\"header-anchor\\" href=\\"#前言\\"><span></span></a><a href=\\"#%E5%89%8D%E8%A8%80\\">前言</a></h2>\\n<p></p>\\n<p>对于<code>ThreadLocal</code>，大家的第一反应可能是很简单呀，线程的变量副本，每个线程隔离。那这里有几个问题大家可以思考一下：</p>\\n<ul>\\n<li><code>ThreadLocal</code>的 key 是<strong>弱引用</strong>，那么在 <code>ThreadLocal.get()</code>的时候，发生<strong>GC</strong>之后，key 是否为<strong>null</strong>？</li>\\n<li><code>ThreadLocal</code>中<code>ThreadLocalMap</code>的<strong>数据结构</strong>？</li>\\n<li><code>ThreadLocalMap</code>的<strong>Hash 算法</strong>？</li>\\n<li><code>ThreadLocalMap</code>中<strong>Hash 冲突</strong>如何解决？</li>\\n<li><code>ThreadLocalMap</code>的<strong>扩容机制</strong>？</li>\\n<li><code>ThreadLocalMap</code>中<strong>过期 key 的清理机制</strong>？<strong>探测式清理</strong>和<strong>启发式清理</strong>流程？</li>\\n<li><code>ThreadLocalMap.set()</code>方法实现原理？</li>\\n<li><code>ThreadLocalMap.get()</code>方法实现原理？</li>\\n<li>项目中<code>ThreadLocal</code>使用情况？遇到的坑？</li>\\n<li>……</li>\\n</ul>","autoDesc":true}');export{J as comp,Y as data};
