import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as m,b as s,e as a,a as t}from"./app-BJxNEa8Q.js";const e={},r=s("p",null,"Author:Backl1ght",-1),i=s("p",null,[a("tim 排序是归并排序和插入排序的结合，是一个 "),s("strong",null,"稳定"),a(" 的排序算法，由 Tim Peters 于 2002 年用 Python 实现。现在，tim 排序是 Python 的标准排序算法，且被 Java SE7 用于对非原始类型的数组排序。")],-1),o=s("p",null,[a("tim 排序在最好情况下的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a("，最差情况下的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n \\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a("，期望时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n \\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a("。tim 排序在最坏情况下的空间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a("。")],-1),p=s("h2",{id:"算法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#算法"},[s("span",null,"算法")])],-1),c=s("p",null,"众所周知，归并排序是先将数组划分为两部分，然后递归地对两个子数组进行归并排序，最后合并两个子数组。这样一来，归并排序合并操作的最小单位就是单个元素。但是，数组中可能原本就存在连续且有序的子数组，归并排序无法利用这个特性。",-1),h=s("p",null,"tim 排序为了利用数组中本身就存在的连续且有序的子数组，以 RUN 作为合并操作的最小单位。其中，RUN 是一个满足以下性质的子数组：",-1),u=s("ul",null,[s("li",null,"一个 RUN 要么是非降序的，要么是严格升序的。"),s("li",null,"一个 RUN 存在一个长度的下限。")],-1),d=s("p",null,"tim 排序的过程就是一个类似归并排序的过程，将数组划分为多个 RUN，然后以某种规则不断地合并两个 RUN，直到数组有序。具体过程如下：",-1),g=s("p",null,[a("令 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g")]),s("annotation",{encoding:"application/x-tex"},"nRemaining")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mainin"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g")])])]),a(" 初始化为数组的大小，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"u"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"minRun")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"min"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n")])])]),a(" 初始化为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"g"),s("mi",null,"e"),s("mi",null,"t"),s("mi",null,"M"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"L"),s("mi",null,"e"),s("mi",null,"n"),s("mi",null,"g"),s("mi",null,"t"),s("mi",null,"h"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"getMinRunLength(nRemaining)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"tM"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"h"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mainin"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mclose"},")")])])]),a("。")],-1),y=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.16em",columnalign:"left left",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mtext",{mathvariant:"bold"},"do")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mtext",null,"确定"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"的起点")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mtext",{mathvariant:"bold"},"if"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"比"),s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"短")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"4")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mspace",{width:"2em"}),s("mtext",null,"延长"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"直至"),s("mi",null,"min"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"u"),s("mi",null,"n"),s("mo",{separator:"true"},","),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mtext",{mathvariant:"bold"},"push"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"放到"),s("mi",null,"p"),s("mi",null,"e"),s("mi",null,"n"),s("mi",null,"d"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",null,"−"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"k"),s("mtext",null,"上")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"6")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mtext",{mathvariant:"bold"},"if"),s("mi",null,"p"),s("mi",null,"e"),s("mi",null,"n"),s("mi",null,"d"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",null,"−"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"k"),s("mtext",null,"最顶上的 2 个"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"长度相近")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"7")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mspace",{width:"2em"}),s("mtext",null,"合并"),s("mi",null,"p"),s("mi",null,"e"),s("mi",null,"n"),s("mi",null,"d"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",null,"−"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"s"),s("mi",null,"t"),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"k"),s("mtext",null,"最顶上的 2 个"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"8")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mtext",null,"start index"),s("mo",null,"←"),s("mtext",null,"start index"),s("mo",null,"+"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"的长度")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"9")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mspace",{width:"2em"}),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",null,"←"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",null,"−"),s("mi",null,"r"),s("mi",null,"u"),s("mi",null,"n"),s("mtext",null,"的长度")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"10")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",{mathvariant:"bold"},"while"),s("mtext",null," "),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"g"),s("mo",{mathvariant:"normal"},"≠"),s("mn",null,"0")])])])])]),s("annotation",{encoding:"application/x-tex"}," \\begin{array}{ll} 1 & \\textbf{do}\\\\ 2 & \\qquad \\text{确定} run \\text{的起点}\\\\ 3 & \\qquad \\textbf{if} run \\text{比} minRun \\text{短}\\\\ 4 & \\qquad \\qquad \\text{延长} run \\text{直至} \\min(minRun, nRemaining)\\\\ 5 & \\qquad \\textbf{push} run \\text{放到} pending-run stack \\text{上}\\\\ 6 & \\qquad \\textbf{if} pending-run stack \\text{最顶上的 2 个} run \\text{长度相近}\\\\ 7 & \\qquad \\qquad \\text{合并} pending-run stack \\text{最顶上的 2 个} run\\\\ 8 & \\qquad \\text{start index} \\gets \\text{start index} + run \\text{的长度}\\\\ 9 & \\qquad nRemaining \\gets nRemaining - run \\text{的长度}\\\\ 10 & \\textbf{while} \\text{ } nRemaining \\ne 0\\\\ \\end{array} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"12em","vertical-align":"-5.75em"}}),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"6.25em"}},[s("span",{style:{top:"-8.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-7.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-6.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])]),s("span",{style:{top:"-4.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4")])]),s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"6")])]),s("span",{style:{top:"-1.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"7")])]),s("span",{style:{top:"-0.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"8")])]),s("span",{style:{top:"1.19em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"9")])]),s("span",{style:{top:"2.39em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"10")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"5.75em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"6.25em"}},[s("span",{style:{top:"-8.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord textbf"},"do")])])]),s("span",{style:{top:"-7.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"确定")]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"的起点")])])]),s("span",{style:{top:"-6.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textbf"},"if")]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"比")]),s("span",{class:"mord mathnormal"},"min"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"短")])])]),s("span",{style:{top:"-4.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"延长")]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"直至")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},"min"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"min"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mainin"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mclose"},")")])]),s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textbf"},"push")]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"放到")]),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"上")])])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord textbf"},"if")]),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"最顶上的"),s("span",{class:"mord"}," 2 "),s("span",{class:"mord cjk_fallback"},"个")]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"长度相近")])])]),s("span",{style:{top:"-1.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"合并")]),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"最顶上的"),s("span",{class:"mord"}," 2 "),s("span",{class:"mord cjk_fallback"},"个")]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n")])]),s("span",{style:{top:"-0.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"start index")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"←"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"start index")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"的长度")])])]),s("span",{style:{top:"1.19em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mspace",style:{"margin-right":"2em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mainin"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"←"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mainin"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"的长度")])])]),s("span",{style:{top:"2.39em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord text"},[s("span",{class:"mord textbf"},"while")]),s("span",{class:"mord text"},[s("span",{class:"mord"}," ")]),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"mainin"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},[s("span",{class:"mrel"},[s("span",{class:"mord vbox"},[s("span",{class:"thinbox"},[s("span",{class:"rlap"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"inner"},[s("span",{class:"mord"},[s("span",{class:"mrel"},"")])]),s("span",{class:"fix"})])])])]),s("span",{class:"mrel"},"=")]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"5.75em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}})])])])])])])],-1),x=s("p",null,[a("其中，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"g"),s("mi",null,"e"),s("mi",null,"t"),s("mi",null,"M"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"u"),s("mi",null,"n"),s("mi",null,"L"),s("mi",null,"e"),s("mi",null,"n"),s("mi",null,"g"),s("mi",null,"t"),s("mi",null,"h")]),s("annotation",{encoding:"application/x-tex"},"getMinRunLength")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"tM"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"h")])])]),a(" 函数是根据当前数组长度确定 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"R"),s("mi",null,"u"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"minRun")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"min"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"n")])])]),a(" 具体值的函数，natural run 的意思是原本就非降序或者严格升序的 run，扩展长度不够的 run 就是用插入排序往 run 中添加元素。")],-1),w=s("h2",{id:"复杂度证明",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#复杂度证明"},[s("span",null,"复杂度证明")])],-1),k=s("p",null,[a("最好情况下，数组本身就有序，即数组本身就是一个 RUN，这个时候 tim 排序就遍历了一遍数组，找到了唯一的 RUN，就结束了。所以，最好的情况下，tim 排序的时间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])]),a("。")],-1),f=t('<h2 id="写在后面" tabindex="-1"><a class="header-anchor" href="#写在后面"><span>写在后面</span></a></h2><p>本文只是简单介绍了 tim 排序的原理，实际上 tim 排序在实现的时候还有一些其他的优化，这里不再一一列举。tim 排序在 java 中的实现写得非常好，要想知道真正的 tim 排序推荐去看 java 中 tim 排序的实现。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://en.wikipedia.org/wiki/Timsort" target="_blank" rel="noopener noreferrer">Timsort</a></li><li><a href="https://drops.dagstuhl.de/opus/volltexte/2018/9467/pdf/LIPIcs-ESA-2018-4.pdf" target="_blank" rel="noopener noreferrer">On the Worst-Case Complexity of TimSort</a></li><li><a href="https://bugs.python.org/file4451/timsort.txt" target="_blank" rel="noopener noreferrer">original explanation by Tim Peters</a></li><li><a href="https://web.archive.org/web/20150716000631/https://android.googlesource.com/platform/libcore/+/gingerbread/luni/src/main/java/java/util/TimSort.java" target="_blank" rel="noopener noreferrer">java 实现</a></li><li><a href="http://svn.python.org/projects/python/trunk/Objects/listobject.c" target="_blank" rel="noopener noreferrer">c 语言实现</a></li></ol>',4),b=[r,i,o,p,c,h,u,d,g,y,x,w,k,f];function v(_,M){return m(),n("div",null,b)}const j=l(e,[["render",v],["__file","tim-sort.html.vue"]]),L=JSON.parse('{"path":"/algorithms/sort/tim-sort.html","title":"","lang":"zh-CN","frontmatter":{"description":"Author:Backl1ght tim 排序是归并排序和插入排序的结合，是一个 稳定 的排序算法，由 Tim Peters 于 2002 年用 Python 实现。现在，tim 排序是 Python 的标准排序算法，且被 Java SE7 用于对非原始类型的数组排序。 tim 排序在最好情况下的时间复杂度为 O(n)，最差情况下的时间复杂度为 O(n...","head":[["meta",{"property":"og:url","content":"https://leslie-dd.github.io/leslie-blog/leslie-blog/algorithms/sort/tim-sort.html"}],["meta",{"property":"og:site_name","content":"Leslie的博客"}],["meta",{"property":"og:description","content":"Author:Backl1ght tim 排序是归并排序和插入排序的结合，是一个 稳定 的排序算法，由 Tim Peters 于 2002 年用 Python 实现。现在，tim 排序是 Python 的标准排序算法，且被 Java SE7 用于对非原始类型的数组排序。 tim 排序在最好情况下的时间复杂度为 O(n)，最差情况下的时间复杂度为 O(n..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-19T07:24:37.000Z"}],["meta",{"property":"article:author","content":"DYF"}],["meta",{"property":"article:modified_time","content":"2024-04-19T07:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-19T07:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DYF\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"算法","slug":"算法","link":"#算法","children":[]},{"level":2,"title":"复杂度证明","slug":"复杂度证明","link":"#复杂度证明","children":[]},{"level":2,"title":"写在后面","slug":"写在后面","link":"#写在后面","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1713511477000,"updatedTime":1713511477000,"contributors":[{"name":"Leslie","email":"LeslieDYF@gmail.com","commits":1}]},"readingTime":{"minutes":2.61,"words":782},"filePathRelative":"algorithms/sort/tim-sort.md","localizedDate":"2024年4月19日","excerpt":"<p>Author:Backl1ght</p>\\n<p>tim 排序是归并排序和插入排序的结合，是一个 <strong>稳定</strong> 的排序算法，由 Tim Peters 于 2002 年用 Python 实现。现在，tim 排序是 Python 的标准排序算法，且被 Java SE7 用于对非原始类型的数组排序。</p>\\n<p>tim 排序在最好情况下的时间复杂度为 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span>，最差情况下的时间复杂度为 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(n \\\\log n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mop\\">lo<span style=\\"margin-right:0.01389em;\\">g</span></span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span>，期望时间复杂度为 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(n \\\\log n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mop\\">lo<span style=\\"margin-right:0.01389em;\\">g</span></span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span>。tim 排序在最坏情况下的空间复杂度为 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>O</mi><mo stretchy=\\"false\\">(</mo><mi>n</mi><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">O(n)</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">O</span><span class=\\"mopen\\">(</span><span class=\\"mord mathnormal\\">n</span><span class=\\"mclose\\">)</span></span></span></span>。</p>","autoDesc":true}');export{j as comp,L as data};
