import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c as o,a as e,b as s,d as n,e as t}from"./app-D5nYSIv7.js";const c={},p=t(`<h2 id="输出-commits-到文件" tabindex="-1"><a class="header-anchor" href="#输出-commits-到文件"><span>输出 commits 到文件</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&quot;%H|%s|%an&quot;</span> <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;100 day ago&quot;</span> <span class="token operator">&gt;&gt;</span> ~/Desktop/commit.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),d={href:"https://www.cnblogs.com/bellkosmos/p/5923439.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="分支基本操作" tabindex="-1"><a class="header-anchor" href="#分支基本操作"><span>分支基本操作</span></a></h2><h3 id="_1-新建远程分支" tabindex="-1"><a class="header-anchor" href="#_1-新建远程分支"><span>1. 新建远程分支</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> alpha <span class="token comment"># 先在本地新建分支</span>
<span class="token function">git</span> push origin alpha:alpha <span class="token comment"># 把本地分支push到远程仓库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-新建本地分支并跟随远程分支" tabindex="-1"><a class="header-anchor" href="#_2-新建本地分支并跟随远程分支"><span>2. 新建本地分支并跟随远程分支</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span> <span class="token comment"># 新建本地分支test</span>
<span class="token function">git</span> branch --set-upstream-to remotes/origin/alpha <span class="token comment"># 将本地分支test跟随远程分支origin/alpha</span>
<span class="token comment"># 或者</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span> origin/alpha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-删除远程分支" tabindex="-1"><a class="header-anchor" href="#_3-删除远程分支"><span>3. 删除远程分支</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin :dbg_lichen_star <span class="token comment"># 推送一个空分支到远程分支，其实就相当于删除远程分支</span>
<span class="token comment"># 或者</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> dbg_lichen_star
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-取消本地分支与远程分支的跟随" tabindex="-1"><a class="header-anchor" href="#_4-取消本地分支与远程分支的跟随"><span>4. 取消本地分支与远程分支的跟随</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch --unset-upstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-修改本地分支名称" tabindex="-1"><a class="header-anchor" href="#_5-修改本地分支名称"><span>5. 修改本地分支名称</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-m</span> OldBranchName NewBranchName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-本地删除远程已删除的分支" tabindex="-1"><a class="header-anchor" href="#_6-本地删除远程已删除的分支"><span>6. 本地删除远程已删除的分支</span></a></h3><blockquote><p>每次将一个分支在 gitlab 上 merge 到开发分支，默认都会是删除，但是有次<code>git branch -r</code>发现对应的分支还有。</p><p>原因是本地和远端没有同步。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote show origin <span class="token comment"># 这个命令可以看到分支的详细信息，远程仓库已经不存在的分支会提示\`(stale (use &#39;git remote prune&#39; to remove))\`</span>
<span class="token function">git</span> remote prune origin <span class="token comment"># 根据提示删除或者说同步本地分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改-gitignore-不起作用" tabindex="-1"><a class="header-anchor" href="#修改-gitignore-不起作用"><span>修改 gitignore 不起作用</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。</p></div><div class="hint-container tip"><p class="hint-container-title">原因</p><p>在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，<br> 这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</p></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;update .gitignore&#39;</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),m={href:"https://blog.csdn.net/Saintmm/article/details/120847019",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="git-pull-每次都要输入密码" tabindex="-1"><a class="header-anchor" href="#git-pull-每次都要输入密码"><span>git pull 每次都要输入密码</span></a></h2><p>其实有两种方式</p><h4 id="_1、ssh方式clone项目-并把本机token托管到github-ssh-keys" tabindex="-1"><a class="header-anchor" href="#_1、ssh方式clone项目-并把本机token托管到github-ssh-keys"><span>1、ssh方式clone项目，并把本机token托管到github ssh keys</span></a></h4><h4 id="_2、保存username和personal-access-tokens" tabindex="-1"><a class="header-anchor" href="#_2、保存username和personal-access-tokens"><span>2、保存Username和personal access tokens</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--local</span> credential.helper store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下次pull的时候输一次密码以后就不用输了</p><h2 id="pull远程分支并解冲突" tabindex="-1"><a class="header-anchor" href="#pull远程分支并解冲突"><span>pull远程分支并解冲突</span></a></h2><blockquote><p>如果在master分支下面新建一个分支，开发的同时，master又新增了一下代码，需要在新的master上面继续开发</p></blockquote><ol><li>先把自己写的代码，保存到本地库，然后推送到来远程库（至关重要），然后拉下来远程库，也很重要</li><li>切换到本地master分支，pull取远程仓库中最新的master代码</li><li>切换到你现在开发的分支，在git命令中输入：git rebase origin/MASTER</li><li>这样就会把你现在正在开发的分支中已经写好的代码与最新的Master分支的代码融合在一起</li><li>输入 git status 显示冲突的文件，然后找到一个文件解决冲突，git add 文件名<br> 这样才算解决一个冲突。输入 git rebase --continue ，继续git status ....... 直到所有的冲突全部解决（git status如果不显示冲突文件，但又处于rebase状态，输入git rebase --skip)。如果不想解决冲突了，输入 git rebase --abort ，回到最初的状态，前面解决的所有冲突都会恢复到以前的状态</li><li>解决完冲突后，推送到远程库。</li><li>完成</li></ol><blockquote><p>如何查看rebase完成了呢？git branch看看自己是否在当前的分支，如果回到当前分支，就是rebase完成。<br> 如果rebase没有完成，git branch不会在当前分支，会在rebase新开的分支（一个临时的分支）里面。<br> git branch -vv 查看自己的分支，以及自己的分支与远程分支落后多少个文件，如果落后了就git pull，解决冲突.<br> git push失败，可能是本地这个分支有一些文件落后远程分支，需要git pull.</p></blockquote><h2 id="本地多个ssh-key-如何区分" tabindex="-1"><a class="header-anchor" href="#本地多个ssh-key-如何区分"><span>本地多个ssh-key，如何区分</span></a></h2><ol><li>生成ssh-key</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.ssh
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&#39;xxx@xx.com&#39;</span> <span class="token parameter variable">-f</span> id_rsa_second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>将新的ssh public key添加到内部的gitlab仓库</p></li><li><p>在~/.ssh 目录下创建config文件,用于配置私钥对应的服务器,内容：</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Host gitlab.xxx.com <span class="token comment">#可以随意命名  </span>
HostName gitlab.xxx.com  
User <span class="token function">git</span>  
Port <span class="token number">22</span>  
IdentityFile ~/.ssh/id_rsa_second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>克隆仓库即可</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@gitlab.xxx.com/xx.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="撤销-git-commit-amend" tabindex="-1"><a class="header-anchor" href="#撤销-git-commit-amend"><span>撤销 git commit --amend</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog <span class="token comment"># 查看操作记录</span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span><strong>参考</strong></span></a></h2>`,20),g={href:"https://www.huaweicloud.com/articles/3987ec9dfbd9f650e70ceb9eebe05287.html",target:"_blank",rel:"noopener noreferrer"},b=e("br",null,null,-1),v={href:"https://www.jianshu.com/p/97341ed9d89e",target:"_blank",rel:"noopener noreferrer"};function k(_,f){const a=l("ExternalLinkIcon");return r(),o("div",null,[p,e("p",null,[e("a",d,[s("参考博客"),n(a)])]),h,e("p",null,[e("a",m,[s("Ref"),n(a)])]),u,e("p",null,[e("a",g,[s("https://www.huaweicloud.com/articles/3987ec9dfbd9f650e70ceb9eebe05287.html"),n(a)]),b,e("a",v,[s("https://www.jianshu.com/p/97341ed9d89e"),n(a)])])])}const w=i(c,[["render",k],["__file","git_github_tips.html.vue"]]),G=JSON.parse('{"path":"/tutorial/git_github_tips.html","title":"Git & GitHub","lang":"zh-CN","frontmatter":{"title":"Git & GitHub","author":"Leslie-D","date":"2022-03-27T00:00:00.000Z","star":true,"tag":["Git","Github"],"editLink":false,"comment":false,"description":"输出 commits 到文件 参考博客 分支基本操作 1. 新建远程分支 2. 新建本地分支并跟随远程分支 3. 删除远程分支 4. 取消本地分支与远程分支的跟随 5. 修改本地分支名称 6. 本地删除远程已删除的分支 每次将一个分支在 gitlab 上 merge 到开发分支，默认都会是删除，但是有次git branch -r发现对应的分支还有。 原...","head":[["meta",{"property":"og:url","content":"https://leslie-dd.github.io/leslie-blog/leslie-blog/tutorial/git_github_tips.html"}],["meta",{"property":"og:site_name","content":"Leslie的博客"}],["meta",{"property":"og:title","content":"Git & GitHub"}],["meta",{"property":"og:description","content":"输出 commits 到文件 参考博客 分支基本操作 1. 新建远程分支 2. 新建本地分支并跟随远程分支 3. 删除远程分支 4. 取消本地分支与远程分支的跟随 5. 修改本地分支名称 6. 本地删除远程已删除的分支 每次将一个分支在 gitlab 上 merge 到开发分支，默认都会是删除，但是有次git branch -r发现对应的分支还有。 原..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-20T03:36:48.000Z"}],["meta",{"property":"article:author","content":"Leslie-D"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"Github"}],["meta",{"property":"article:published_time","content":"2022-03-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-20T03:36:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git & GitHub\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-20T03:36:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leslie-D\\"}]}"]]},"headers":[{"level":2,"title":"输出 commits 到文件","slug":"输出-commits-到文件","link":"#输出-commits-到文件","children":[]},{"level":2,"title":"分支基本操作","slug":"分支基本操作","link":"#分支基本操作","children":[{"level":3,"title":"1. 新建远程分支","slug":"_1-新建远程分支","link":"#_1-新建远程分支","children":[]},{"level":3,"title":"2. 新建本地分支并跟随远程分支","slug":"_2-新建本地分支并跟随远程分支","link":"#_2-新建本地分支并跟随远程分支","children":[]},{"level":3,"title":"3. 删除远程分支","slug":"_3-删除远程分支","link":"#_3-删除远程分支","children":[]},{"level":3,"title":"4. 取消本地分支与远程分支的跟随","slug":"_4-取消本地分支与远程分支的跟随","link":"#_4-取消本地分支与远程分支的跟随","children":[]},{"level":3,"title":"5. 修改本地分支名称","slug":"_5-修改本地分支名称","link":"#_5-修改本地分支名称","children":[]},{"level":3,"title":"6. 本地删除远程已删除的分支","slug":"_6-本地删除远程已删除的分支","link":"#_6-本地删除远程已删除的分支","children":[]}]},{"level":2,"title":"修改 gitignore 不起作用","slug":"修改-gitignore-不起作用","link":"#修改-gitignore-不起作用","children":[]},{"level":2,"title":"git pull 每次都要输入密码","slug":"git-pull-每次都要输入密码","link":"#git-pull-每次都要输入密码","children":[]},{"level":2,"title":"pull远程分支并解冲突","slug":"pull远程分支并解冲突","link":"#pull远程分支并解冲突","children":[]},{"level":2,"title":"本地多个ssh-key，如何区分","slug":"本地多个ssh-key-如何区分","link":"#本地多个ssh-key-如何区分","children":[]},{"level":2,"title":"撤销 git commit --amend","slug":"撤销-git-commit-amend","link":"#撤销-git-commit-amend","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1664720147000,"updatedTime":1689824208000,"contributors":[{"name":"Leslie","email":"LeslieDYF@gmail.com","commits":1}]},"readingTime":{"minutes":3.89,"words":1168},"filePathRelative":"tutorial/git_github_tips.md","localizedDate":"2022年3月27日","excerpt":"<h2>输出 commits 到文件</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> log <span class=\\"token parameter variable\\">--pretty</span><span class=\\"token operator\\">=</span>format:<span class=\\"token string\\">\\"%H|%s|%an\\"</span> <span class=\\"token parameter variable\\">--since</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"100 day ago\\"</span> <span class=\\"token operator\\">&gt;&gt;</span> ~/Desktop/commit.txt\\n</code></pre></div>","autoDesc":true}');export{w as comp,G as data};
