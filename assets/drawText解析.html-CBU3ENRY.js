import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o,c as i,a as t,b as e,d as p,e as r}from"./app-CsIxvd9_.js";const c="/leslie-blog/assets/drawtext-BVVT0dnC.jpeg",l={},d=r('<p>用Canvas的draw***方法去绘制图像图形，绘制的坐标一般是从Canvas左上角开始计算的，如果想要把一个图像放到某个位置，直接drawBitmap传递图片左上角的坐标即可。<br> 但是drawText不一样，如果你传递进去字符串，会发现文字的位置和你指定的不一样。</p><p>源码是native方法，没法直接看</p><p><img src="'+c+`" alt=""></p><h2 id="paint-gettextbounds" tabindex="-1"><a class="header-anchor" href="#paint-gettextbounds"><span>Paint.getTextBounds:</span></a></h2><p>当你通过这个方法来获取尺寸的时候，你可以得到能够包裹文字的最小矩形，就是图中红色边框的那部分，你可以得到一个Rect对象，包含这个最小尺寸的几个值。</p><p><strong>注：这里的Rect对象坐标并不是以左上角为准的，而是相对于左边中间靠下位置的一个点，就是图中的黄色五角星。而这里水平的Baseline指的是字符串对齐的一条线。既然这样，r.top就是一个负值了，r.bottom会是一个小一点的正值，r.left和r.right在图中画的都很清楚。通过r.width()和r.height()来获取尺寸。</strong></p><p>那么文字的偏移就好说了，比如说你要把文字画在Canvas的左上角，坐标是(0,0)，但是当你通过：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>“dangwen”<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来画文字的时候，发现只有文字的下半部分画出来了，因为你传递进去的参数应该是以Baseline为标准的，正确的方法是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>“dangwen”<span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token punctuation">.</span>left<span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token punctuation">.</span>top<span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="paint-getfontmetricsint" tabindex="-1"><a class="header-anchor" href="#paint-getfontmetricsint"><span>Paint.getFontMetricsInt()</span></a></h2><p>当你通过这里方法来获取尺寸的时候，你获取的只是一个垂直方向上的尺寸，这里的ascent代表的是字体的上部，descent代表的是字体的下部，这里需要注意的是这和上面获得的Rect的top和bottom不太一样，他们比比ascent和descent距离稍微小一些，这些具体的高度可能和不同的字体和渲染方式有关系，这里就不深入了 #我是不懂#。</p><p>然后如果把文字写入TextView（图中蓝色部分）并且设置TextView的高度和宽度设为wrap_content，那么TextView的高度就正好是FontMetricsInt.top – FontMetricsInt.bottom, 那宽度呢？ Paint.measureText()。</p><hr>`,14),u={href:"https://blog.csdn.net/linghu_java/article/details/46404081",target:"_blank",rel:"noopener noreferrer"};function m(g,h){const a=s("ExternalLinkIcon");return o(),i("div",null,[d,t("p",null,[t("strong",null,[e("转载自 "),t("a",u,[e("https://blog.csdn.net/linghu_java/article/details/46404081"),p(a)])])])])}const T=n(l,[["render",m],["__file","drawText解析.html.vue"]]),b=JSON.parse('{"path":"/blog/android/drawText%E8%A7%A3%E6%9E%90.html","title":"Canvas.drawText解析","lang":"zh-CN","frontmatter":{"author":"Leslie-D","title":"Canvas.drawText解析","tag":["Android","转载"],"editLink":false,"comment":false,"date":"2022-06-16T00:00:00.000Z","description":"用Canvas的draw***方法去绘制图像图形，绘制的坐标一般是从Canvas左上角开始计算的，如果想要把一个图像放到某个位置，直接drawBitmap传递图片左上角的坐标即可。 但是drawText不一样，如果你传递进去字符串，会发现文字的位置和你指定的不一样。 源码是native方法，没法直接看 Paint.getTextBounds: 当你通过...","head":[["meta",{"property":"og:url","content":"https://leslie-dd.github.io/leslie-blog/leslie-blog/blog/android/drawText%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Leslie的博客"}],["meta",{"property":"og:title","content":"Canvas.drawText解析"}],["meta",{"property":"og:description","content":"用Canvas的draw***方法去绘制图像图形，绘制的坐标一般是从Canvas左上角开始计算的，如果想要把一个图像放到某个位置，直接drawBitmap传递图片左上角的坐标即可。 但是drawText不一样，如果你传递进去字符串，会发现文字的位置和你指定的不一样。 源码是native方法，没法直接看 Paint.getTextBounds: 当你通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-20T03:36:48.000Z"}],["meta",{"property":"article:author","content":"Leslie-D"}],["meta",{"property":"article:tag","content":"Android"}],["meta",{"property":"article:tag","content":"转载"}],["meta",{"property":"article:published_time","content":"2022-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-20T03:36:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Canvas.drawText解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-20T03:36:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leslie-D\\"}]}"]]},"headers":[{"level":2,"title":"Paint.getTextBounds:","slug":"paint-gettextbounds","link":"#paint-gettextbounds","children":[]},{"level":2,"title":"Paint.getFontMetricsInt()","slug":"paint-getfontmetricsint","link":"#paint-getfontmetricsint","children":[]}],"git":{"createdTime":1664720147000,"updatedTime":1689824208000,"contributors":[{"name":"Leslie","email":"LeslieDYF@gmail.com","commits":1},{"name":"Leslie","email":"leslie_ding@163.com","commits":1}]},"readingTime":{"minutes":1.93,"words":580},"filePathRelative":"blog/android/drawText解析.md","localizedDate":"2022年6月16日","excerpt":"<p>用Canvas的draw***方法去绘制图像图形，绘制的坐标一般是从Canvas左上角开始计算的，如果想要把一个图像放到某个位置，直接drawBitmap传递图片左上角的坐标即可。<br>\\n但是drawText不一样，如果你传递进去字符串，会发现文字的位置和你指定的不一样。</p>\\n<p>源码是native方法，没法直接看</p>\\n<!-- <img src=\\"@source/blog/android/drawtext.jpeg\\">’ -->\\n<p></p>\\n<h2>Paint.getTextBounds:</h2>\\n<p>当你通过这个方法来获取尺寸的时候，你可以得到能够包裹文字的最小矩形，就是图中红色边框的那部分，你可以得到一个Rect对象，包含这个最小尺寸的几个值。</p>","autoDesc":true}');export{T as comp,b as data};
